<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Object-Oriented Programming (OOP) on Fernando's Blog</title><link>https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/</link><description>Recent content in Object-Oriented Programming (OOP) on Fernando's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>OOP Principles</title><link>https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/01-principles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/01-principles/</guid><description>&lt;!-- Four Principles -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Principles&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>C# is an object-oriented programming language. The four basic principles of object-oriented programming are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Encapsulation:&lt;/strong> Hiding the internal state and functionality of an object and only allowing access through a public set of functions.&lt;/li>
&lt;li>&lt;strong>Inheritance:&lt;/strong> Ability to create new abstractions based on existing abstractions.&lt;/li>
&lt;li>&lt;strong>Polymorphism:&lt;/strong> Ability to implement inherited properties or methods in different ways across multiple abstractions.&lt;/li>
&lt;li>&lt;strong>Abstraction:&lt;/strong> Modeling the relevant attributes and interactions of entities as classes to define an abstract representation of a system.&lt;/li>
&lt;/ul>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Encapsulation -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Encapsulation&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;h3 id="definition">Definition&lt;/h3>
&lt;p>Encapsulation is sometimes referred to as the first pillar or principle of object-oriented programming. A class or struct can specify how accessible each of its members is to code outside of the class or struct. Members not intended for consumers outside of the class or assembly are hidden to limit the potential for coding errors or malicious exploits.&lt;/p></description></item><item><title>SOLID Principles</title><link>https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/02-solid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/02-solid/</guid><description>&lt;!-- SOLID definition -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>SOLID&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;h3 id="definition">Definition&lt;/h3>
&lt;p>SOLID is a set of five design principles that aim to make object-oriented software easier to understand, maintain, and extend. These principles were popularized by Robert C. Martin (Uncle Bob) in his 2000 paper &amp;ldquo;Design Principles and Design Patterns&amp;rdquo; and the acronym SOLID was coined a few years later.&lt;/p>
&lt;p>The five SOLID principles are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>S&lt;/strong>ingle Responsibility Principle (SRP)&lt;/li>
&lt;li>&lt;strong>O&lt;/strong>pen-Closed Principle (OCP)&lt;/li>
&lt;li>&lt;strong>L&lt;/strong>iskov Substitution Principle (LSP)&lt;/li>
&lt;li>&lt;strong>I&lt;/strong>nterface Segregation Principle (ISP)&lt;/li>
&lt;li>&lt;strong>D&lt;/strong>ependency Inversion Principle (DIP)&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ll be using the same example from &lt;a href="https://dev.to/moh_moh701/c-clean-code-solid-principles-51ed" target="_blank" rel="noopener">C# Clean Code: SOLID Principles – Dev.to&lt;/a>, so as the initial code we have the following:&lt;/p></description></item><item><title>Design Patterns</title><link>https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/03-design-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/03-design-patterns/</guid><description>&lt;!-- SOLID definition -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>SOLID&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;h3 id="definition">Definition&lt;/h3>
&lt;p>SOLID is a set of five design principles that aim to make object-oriented software easier to understand, maintain, and extend. These principles were popularized by Robert C. Martin (Uncle Bob) in his 2000 paper &amp;ldquo;Design Principles and Design Patterns&amp;rdquo; and the acronym SOLID was coined a few years later.&lt;/p>
&lt;p>The five SOLID principles are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>S&lt;/strong>ingle Responsibility Principle (SRP)&lt;/li>
&lt;li>&lt;strong>O&lt;/strong>pen-Closed Principle (OCP)&lt;/li>
&lt;li>&lt;strong>L&lt;/strong>iskov Substitution Principle (LSP)&lt;/li>
&lt;li>&lt;strong>I&lt;/strong>nterface Segregation Principle (ISP)&lt;/li>
&lt;li>&lt;strong>D&lt;/strong>ependency Inversion Principle (DIP)&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ll be using the same example from &lt;a href="https://dev.to/moh_moh701/c-clean-code-solid-principles-51ed" target="_blank" rel="noopener">C# Clean Code: SOLID Principles – Dev.to&lt;/a>, so as the initial code we have the following:&lt;/p></description></item><item><title>Error Handling</title><link>https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/99-error-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-csharp/02-object-oriented-programming/99-error-handling/</guid><description>&lt;!-- Error Handling -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Error Handling&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// try code block - code that may generate an exception&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">catch&lt;/span> (Exception ex)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// catch code block - code to handle an exception&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">finally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// finally code block - code to clean up resources&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;!-- Throwing Exceptions -->
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Throwing Exceptions&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> FormatException(&lt;span style="color:#e6db74">&amp;#34;FormatException: Calculations in process XYZ have been cancelled due to invalid data format.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item></channel></rss>