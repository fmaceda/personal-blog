<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clean Code on Fernando's Blog</title><link>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/</link><description>Recent content in Clean Code on Fernando's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Meaningful Names</title><link>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/01-meaningful-names/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/01-meaningful-names/</guid><description>&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Content&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;ol>
&lt;li>Use Intention-Revealing Names&lt;/li>
&lt;li>Avoid Disinformation&lt;/li>
&lt;li>Make Meaningful Distinctions&lt;/li>
&lt;li>Use Pronounceable Names&lt;/li>
&lt;li>Use Searchable Names&lt;/li>
&lt;li>Avoid Encodings&lt;/li>
&lt;li>Avoid Mental Mapping&lt;/li>
&lt;li>Class Names&lt;/li>
&lt;li>Method Names&lt;/li>
&lt;li>Don&amp;rsquo;t Be Cute&lt;/li>
&lt;li>Pick One Word per Concept&lt;/li>
&lt;li>Don&amp;rsquo;t Pun&lt;/li>
&lt;li>Use Solution Domain Names&lt;/li>
&lt;li>Use Problem Domain Names&lt;/li>
&lt;li>Don&amp;rsquo;t Add Gratuitous Context&lt;/li>
&lt;li>Resources&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Use Intention-Revealing Names&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>The name of a variable, function, or class, should answer all the big questions. It should tell you why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent.&lt;/p></description></item><item><title>Functions</title><link>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/02-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/02-functions/</guid><description>&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Content&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;ol>
&lt;li>Small&lt;/li>
&lt;li>Do One Thing&lt;/li>
&lt;li>One Level of Abstraction per Function&lt;/li>
&lt;li>Switch Statements&lt;/li>
&lt;li>Use Descriptive Names&lt;/li>
&lt;li>Function Arguments&lt;/li>
&lt;li>Have No Side Effects&lt;/li>
&lt;li>Command Query Separation&lt;/li>
&lt;li>Prefer Exceptions to Returning Error Codes&lt;/li>
&lt;li>Donâ€™t Repeat Yourself&lt;/li>
&lt;li>Structured Programming&lt;/li>
&lt;li>Resources&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Rules of functions&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>It&amp;rsquo;s importance to create small, focused, and single-responsibility functions that are easy to understand, test, and maintain.&lt;/p>
&lt;h4 id="small">Small&lt;/h4>
&lt;ul>
&lt;li>The first rule of functions is that they should be small. They should hardly ever be 20 lines long.&lt;/li>
&lt;li>This implies that the blocks within &lt;code>if&lt;/code> statements, &lt;code>else&lt;/code> statements, &lt;code>while&lt;/code> statements, and so on should be one line long. Probably that line should be a function call.&lt;/li>
&lt;li>This also implies that functions should not be large enough to hold nested structures. Therefore, the indent level of a function should not be greater than one or two.&lt;/li>
&lt;/ul>
&lt;h4 id="do-one-thing">Do One Thing&lt;/h4>
&lt;ul>
&lt;li>Functions should do one thing, should do it well, and should do it only.&lt;/li>
&lt;li>Functions should not be able to be divided into more sections/functions.&lt;/li>
&lt;/ul>
&lt;h4 id="one-level-of-abstraction-per-function">One Level of Abstraction per Function&lt;/h4>
&lt;ul>
&lt;li>To make sure the functions are doing &amp;ldquo;one thing&amp;rdquo;, we need to make sure that the statements within the function are all at the same level of abstraction.&lt;/li>
&lt;li>We can follow the &amp;ldquo;The Stepdown Rule&amp;rdquo;. It&amp;rsquo;s all about reading code from top to bottom. This way each function introduces the next and make the code readable from top to bottom.&lt;/li>
&lt;/ul>
&lt;h4 id="switch-statements">Switch Statements&lt;/h4>
&lt;ul>
&lt;li>It&amp;rsquo;s hard to make a small &lt;code>switch&lt;/code> statement.&lt;/li>
&lt;li>It violates the Single Responsibility Principle (SRP) because there is more than one reason for it to change.&lt;/li>
&lt;li>It violates the Open Closed Principle8 (OCP) because it must change whenever new cases are added.&lt;/li>
&lt;li>They can be tolerated if they appear only once, are used to create polymorphic objects, and are hidden behind an inheritance&lt;/li>
&lt;/ul>
&lt;h4 id="use-descriptive-names">Use Descriptive Names&lt;/h4>
&lt;ul>
&lt;li>Function name should describes what the function does.&lt;/li>
&lt;li>The smaller and more focused a function is, the easier it is to choose a descriptive name.&lt;/li>
&lt;li>Don&amp;rsquo;t be afraid to make a name long. A long descriptive name is better than a short enigmatic name.&lt;/li>
&lt;/ul>
&lt;h4 id="function-arguments">Function Arguments&lt;/h4>
&lt;ul>
&lt;li>The ideal number of arguments for a function is zero.&lt;/li>
&lt;li>Three arguments should be avoided where possible.&lt;/li>
&lt;li>Arguments should make sense with the function name. There are two very common reasons to pass a single argument into a function.
&lt;ul>
&lt;li>You may be asking a question about that argument.&lt;/li>
&lt;li>Or you may be operating on that argument, transforming it into something else and returning it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Avoid using Flag Arguments.&lt;/li>
&lt;li>Use object arguments.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// In this case, the first two arguments seem to be related.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Circle MakeCircle(&lt;span style="color:#66d9ef">double&lt;/span> x, &lt;span style="color:#66d9ef">double&lt;/span> y, &lt;span style="color:#66d9ef">double&lt;/span> radius);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// We can abstract x and y into Point class, and have one instance instead.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Circle MakeCircle(Point center, &lt;span style="color:#66d9ef">double&lt;/span> radius);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Function and arguments should form a very nice verb/noun pair.&lt;/li>
&lt;/ul>
&lt;h4 id="have-no-side-effects">Have No Side Effects&lt;/h4>
&lt;ul>
&lt;li>Your function promises to do one thing, so it should not do other hidden things.&lt;/li>
&lt;/ul>
&lt;h4 id="command-query-separation">Command Query Separation&lt;/h4>
&lt;ul>
&lt;li>Functions should either do something or answer something, but not both.&lt;/li>
&lt;/ul>
&lt;h4 id="prefer-exceptions-to-returning-error-codes">Prefer Exceptions to Returning Error Codes&lt;/h4>
&lt;ul>
&lt;li>Use try/catch to handle error instead of returning error codes as exceptions can be added without forcing any recompilation or redeployment.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Returning error codes from specific actions.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (DeletePage(page) == StatusOk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (registry.DeleteReference(page.name) == StatusOk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (configKeys.DeleteKey(page.name.makeKey()) == StatusOk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;page deleted&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;configKey not deleted&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;deleteReference from registry failed&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;delete failed&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> E_ERROR;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// We can replace the nested if statements with using try/catch.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DeletePage(page);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> registry.DeleteReference(page.name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configKeys.DeleteKey(page.name.makeKey());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">catch&lt;/span> (Exception e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(e.Message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Functions should do one thing. Error handing is one thing.&lt;/li>
&lt;/ul>
&lt;h4 id="dont-repeat-yourself">Donâ€™t Repeat Yourself&lt;/h4>
&lt;ul>
&lt;li>In case you find some code that is being used, try to separate it into a reusable function.&lt;/li>
&lt;/ul>
&lt;h4 id="structured-programming">Structured Programming&lt;/h4>
&lt;ul>
&lt;li>Edsger Dijkstra&amp;rsquo;s rule says &amp;ldquo;every function and every block within a function should have one entry and one exit&amp;rdquo;.&lt;/li>
&lt;li>Following these rules means that there should only be one return statement in a function, no &lt;code>break&lt;/code> or &lt;code>continue&lt;/code> statements in a loop, and never, ever, any &lt;code>goto&lt;/code> statements.&lt;/li>
&lt;li>This rule provides significant benefit in large functions only.&lt;/li>
&lt;/ul>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Resources&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;ul>
&lt;li>&lt;em>Clean Code: A Handbook of Agile Software Craftsmanship&lt;/em>, by Robert C. Martin&lt;/li>
&lt;li>&lt;a href="https://dev.to/caiocesar/clean-code-in-c-part-2-methods-58mb" target="_blank" rel="noopener">Clean Code in C# Part 2 Methods - DEV Community&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Comments</title><link>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/03-comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/03-comments/</guid><description>&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Content&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;ol>
&lt;li>Rules of comments&lt;/li>
&lt;li>Good comments&lt;/li>
&lt;li>Bad comments&lt;/li>
&lt;li>Resources&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Rules of comments&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>Truth can only be found in one place: the code. Only the code can truly tell you what it does. It is the only source of truly accurate information. Therefore, though comments are sometimes necessary, we will expend significant energy to minimize them.&lt;/p>
&lt;p>One of the more common motivations for writing comments is bad code.&lt;/p>
&lt;p>Clear and expressive code with few comments is far superior to cluttered and complex code with lots of comments.&lt;/p></description></item><item><title>Formatting</title><link>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/04-formatting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/04-formatting/</guid><description>&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Content&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;ol>
&lt;li>Rules of formatting&lt;/li>
&lt;li>Vertical Formatting&lt;/li>
&lt;li>Horizontal Formatting&lt;/li>
&lt;li>Resources&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Rules of formatting&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;h4 id="the-purpose-of-formatting">The Purpose of Formatting&lt;/h4>
&lt;p>Code formatting is about communication, and communication is the professional developer&amp;rsquo;s first order of business.&lt;/p>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Vertical Formatting&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>According to Robert C. Martin example, files long preferred to be 200 lines with an upper limit of 500 lines long.&lt;/p>
&lt;p>Although this should not be a hard and fast rule, it should be considered very desirable. Small files are usually easier to understand than large files are.&lt;/p></description></item><item><title>Objects and Data Structure</title><link>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/05-objects-and-data-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/05-objects-and-data-structure/</guid><description>&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Content&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;ol>
&lt;li>
&lt;p>Rules of functions&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Resources&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Objects and Data Structures&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;h4 id="data-abstraction">Data Abstraction&lt;/h4>
&lt;p>Abstraction is the process of hiding implementation details and exposing only the essential features of a system or component. As well, using proper names that don&amp;rsquo;t expose the implementation details.&lt;/p>
&lt;h4 id="dataobject-anti-symmetry">Data/Object Anti-Symmetry&lt;/h4>
&lt;ul>
&lt;li>Objects hide their data behind abstractions and expose functions that operate on that data.&lt;/li>
&lt;li>Data structure expose their data and have no meaningful functions.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Shared class&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Procedural Code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Point topLeft;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> side;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Rectangle&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Point topLeft;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> height;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> width;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Circle&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> Point center;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> radius;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Geometry&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> PI = &lt;span style="color:#ae81ff">3.141592653589793&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> area(Object shape)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (shape &lt;span style="color:#66d9ef">is&lt;/span> Square) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Square s = (Square)shape;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> s.side * s.side;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (shape &lt;span style="color:#66d9ef">is&lt;/span> Rectangle) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Rectangle r = (Rectangle)shape;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> r.height * r.width;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (shape &lt;span style="color:#66d9ef">is&lt;/span> Circle) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Circle c = (Circle)shape;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> PI * c.radius * c.radius;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// OO Code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Shape&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> area();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span> : Shape {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Point topLeft;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> side;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> area() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> side*side;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Rectangle&lt;/span> : Shape {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Point topLeft;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> height;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> width;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> area() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> height * width;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Circle&lt;/span> : Shape {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> Point center;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> radius;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> PI = &lt;span style="color:#ae81ff">3.141592653589793&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> area() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> PI * radius * radius;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>Procedural&lt;/code> code (code using data structures) makes it easy to add new functions without changing the existing data structures. &lt;code>OO&lt;/code> code, on the other hand, makes it easy to add new classes without changing existing functions.&lt;/li>
&lt;li>&lt;code>Procedural&lt;/code> code makes it hard to add new data structures because all the functions must change. &lt;code>OO&lt;/code> code makes it hard to add new functions because all the classes must change.&lt;/li>
&lt;/ul>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>The Law of Demeter&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>There is a well-known heuristic called the Law of Demeter that says a module should not know about the innards of the objects it manipulates.&lt;/p></description></item></channel></rss>