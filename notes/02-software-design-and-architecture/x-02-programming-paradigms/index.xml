<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming Paradigms on Fernando's Blog</title><link>https://hugo-toha.github.io/notes/02-software-design-and-architecture/x-02-programming-paradigms/</link><description>Recent content in Programming Paradigms on Fernando's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://hugo-toha.github.io/notes/02-software-design-and-architecture/x-02-programming-paradigms/index.xml" rel="self" type="application/rss+xml"/><item><title>Structured Programming</title><link>https://hugo-toha.github.io/notes/02-software-design-and-architecture/x-02-programming-paradigms/x-01-structured-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/02-software-design-and-architecture/x-02-programming-paradigms/x-01-structured-programming/</guid><description>&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Content&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;ol>
&lt;li>Overview&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Overview&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>The first paradigm to be adopted (but not the first to be invented) was structured programming, which was discovered by &lt;strong>Edsger Wybe Dijkstra&lt;/strong> in 1968. Dijkstra showed that the use of unrestrained jumps (goto statements) is harmful to program structure. As we&amp;rsquo;ll see in the chapters that follow, he replaced those jumps with the more familiar if/then/else and do/while/until constructs.&lt;/p>
&lt;p>We can summarize the structured programming paradigm as follows:&lt;/p></description></item><item><title>Object-oriented Programming</title><link>https://hugo-toha.github.io/notes/02-software-design-and-architecture/x-02-programming-paradigms/x-02-object-oriented-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/02-software-design-and-architecture/x-02-programming-paradigms/x-02-object-oriented-programming/</guid><description>&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Content&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;ol>
&lt;li>Use Intention-Revealing Names&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Overview&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>The second paradigm to be adopted was actually discovered two years earlier, in 1966, by &lt;strong>Ole Johan Dahl&lt;/strong> and &lt;strong>Kristen Nygaard&lt;/strong>. These two programmers noticed that the function call stack frame in the ALGOL language could be moved to a heap, thereby allowing local variables declared by a function to exist long after the function returned. The function became a constructor for a class, the local variables became instance variables, and the nested functions became methods. This led inevitably to the discovery of polymorphism through the disciplined use of function pointers.&lt;/p></description></item><item><title>Functional Programming</title><link>https://hugo-toha.github.io/notes/02-software-design-and-architecture/x-02-programming-paradigms/x-03-functional-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hugo-toha.github.io/notes/02-software-design-and-architecture/x-02-programming-paradigms/x-03-functional-programming/</guid><description>&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Content&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;ol>
&lt;li>Use Intention-Revealing Names&lt;/li>
&lt;li>Resources&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="note-card ">
&lt;div class="item">
&lt;h5 class="note-title">&lt;span>Overview&lt;/span>&lt;/h5>
&lt;div class="card">
&lt;div class="card-body">&lt;p>The third paradigm, which has only recently begun to be adopted, was the first to be invented. Indeed, its invention predates computer programming itself. Functional programming is the direct result of the work of &lt;strong>Alonzo Church&lt;/strong>, who in 1936 invented l-calculus while pursuing the same mathematical problem that was motivating Alan Turing at the same time. His l-calculus is the foundation of the LISP language, invented in 1958 by John McCarthy. A foundational notion of l-calculus is immutabilityâ€”that is, the notion that the values of symbols do not change. This effectively means that a functional language has no assignment statement. Most functional languages do, in fact, have some means to alter the value of a variable, but only under very strict discipline.&lt;/p></description></item></channel></rss>