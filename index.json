[{"categories":null,"contents":" Software Design and Architecture Roadmap Topics Clean Code Programming Paradigms Resources:\nHow to Learn Software Design and Architecture | The Full-stack Software Design \u0026amp; Architecture Map Software Design and Architecture Roadmap Clean Code: A Handbook of Agile Software Craftsmanship, by Robert C. Martin Refactoring, by Martin Fowler (2nd edition) The Pragmatic Programmer, by Andy Hunt and Dave Thomas The Design of Everyday Things, by Don Norman ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/01-software-design-and-architecture/00-roadmap/","summary":"\u003c!-- CSharp Fundamentals --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eSoftware Design and Architecture Roadmap\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"topics\"\u003eTopics\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eClean Code\u003c/li\u003e\n\u003cli\u003eProgramming Paradigms\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eResources:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://khalilstemmler.com/articles/software-design-architecture/full-stack-software-design/\" target=\"_blank\" rel=\"noopener\"\u003eHow to Learn Software Design and Architecture | The Full-stack Software Design \u0026amp; Architecture Map\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://roadmap.sh/software-design-architecture\" target=\"_blank\" rel=\"noopener\"\u003eSoftware Design and Architecture Roadmap\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eClean Code: A Handbook of Agile Software Craftsmanship\u003c/em\u003e, by Robert C. Martin\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eRefactoring\u003c/em\u003e, by Martin Fowler (2nd edition)\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eThe Pragmatic Programmer\u003c/em\u003e, by Andy Hunt and Dave Thomas\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eThe Design of Everyday Things\u003c/em\u003e, by Don Norman\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Roadmap"},{"categories":null,"contents":" (1) CSharp Fundamentals Topics Variables and data types Control structures: if, switch, for, while Methods and functions Classes and objects Abstract classes Records Interfaces Generic Anonymous Types Resources:\nC# Basics - Microsoft Learn Free course: C# Programming for Beginners (FreeCodeCamp) (2) Object-Oriented Programming (OOP) in C# Topics Encapsulation, inheritance, polymorphism and abstraction SOLID principles Design patterns (Factory, Singleton, Repository) Delegates and events Custom exceptions Nullable reference types Collections and LINQ Resources Paper \u0026ldquo;Design Principles and Design Patterns\u0026rdquo; by Robert C. Martin Book: \u0026ldquo;Design Patterns in C#\u0026rdquo; by Vaskaran Sarcar Design Patterns in C# – Refactoring.guru C# Clean Code: SOLID Principles – Dev.to Object-oriented programming Apress/design-patterns-csharp-2e – Github.com (3) Dotnet and ASP Dotnet Core Topics Lifecycle of a .NET application Project structure (Program.cs, Startup.cs, or builder) Routing and controllers (Controller, Route, HttpGet/Post/etc.) Dependency Injection Middleware Resources Microsoft Learn: ASP.NET Core Spanish course: Complete ASP.NET Core MVC Course (YouTube - Luis Beltrán) (4) Data Access with Entity Framework Core Topics Defining models and relationships DbContext and migrations CRUD with LINQ and EF Fluent API vs Data Annotations Resources EF Core Official Docs Tutorial: Getting Started with EF Core (5) REST APIs with ASP.NET Core Topics Creating endpoints using ApiController Model validation (DataAnnotations) Filters (ActionFilter, ExceptionFilter) Swagger (API documentation) Resources Microsoft Docs - Build Web APIs Course: REST API with .NET 6 (CodeMaze) (6) Security and Authentication Topics JWT Authentication and Authorization Identity Framework Policies and roles Resources Secure ASP.NET Core with JWT Course (YouTube): JWT Authentication in ASP.NET Core (7) Testing Topics xUnit, NUnit Unit testing and integration testing Mocking with Moq Resources xUnit Documentation Tutorial: Unit Testing in ASP.NET Core Other Resources Resources C# Language Specification ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/00-roadmap/","summary":"\u003c!-- CSharp Fundamentals --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003e(1) CSharp Fundamentals\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"topics\"\u003eTopics\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eVariables and data types\u003c/li\u003e\n\u003cli\u003eControl structures: \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eMethods and functions\u003c/li\u003e\n\u003cli\u003eClasses and objects\u003c/li\u003e\n\u003cli\u003eAbstract classes\u003c/li\u003e\n\u003cli\u003eRecords\u003c/li\u003e\n\u003cli\u003eInterfaces\u003c/li\u003e\n\u003cli\u003eGeneric\u003c/li\u003e\n\u003cli\u003eAnonymous Types\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eResources:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\"\u003eC# Basics - Microsoft Learn\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFree course: \u003ca href=\"https://www.youtube.com/watch?v=GhQdlIFylQ8\" target=\"_blank\" rel=\"noopener\"\u003eC# Programming for Beginners (FreeCodeCamp)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Object-Oriented Programming (OOP) in C# --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003e(2) Object-Oriented Programming (OOP) in C#\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"topics\"\u003eTopics\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEncapsulation, inheritance, polymorphism and abstraction\u003c/li\u003e\n\u003cli\u003eSOLID principles\u003c/li\u003e\n\u003cli\u003eDesign patterns (Factory, Singleton, Repository)\u003c/li\u003e\n\u003cli\u003eDelegates and events\u003c/li\u003e\n\u003cli\u003eCustom exceptions\u003c/li\u003e\n\u003cli\u003eNullable reference types\u003c/li\u003e\n\u003cli\u003eCollections and LINQ\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"resources\"\u003eResources\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ePaper \u0026ldquo;Design Principles and Design Patterns\u0026rdquo; by Robert C. Martin\u003c/li\u003e\n\u003cli\u003eBook: \u0026ldquo;Design Patterns in C#\u0026rdquo; by Vaskaran Sarcar\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://refactoring.guru/design-patterns/csharp\" target=\"_blank\" rel=\"noopener\"\u003eDesign Patterns in C# – Refactoring.guru\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/moh_moh701/c-clean-code-solid-principles-51ed\" target=\"_blank\" rel=\"noopener\"\u003eC# Clean Code: SOLID Principles – Dev.to\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/object-oriented/\" target=\"_blank\" rel=\"noopener\"\u003eObject-oriented programming\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Apress/design-patterns-csharp-2e\" target=\"_blank\" rel=\"noopener\"\u003eApress/design-patterns-csharp-2e – Github.com\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Dotnet and ASP Dotnet Core --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003e(3) Dotnet and ASP Dotnet Core\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"topics\"\u003eTopics\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eLifecycle of a .NET application\u003c/li\u003e\n\u003cli\u003eProject structure (\u003ccode\u003eProgram.cs\u003c/code\u003e, \u003ccode\u003eStartup.cs\u003c/code\u003e, or \u003ccode\u003ebuilder\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eRouting and controllers (\u003ccode\u003eController\u003c/code\u003e, \u003ccode\u003eRoute\u003c/code\u003e, \u003ccode\u003eHttpGet/Post/etc.\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eDependency Injection\u003c/li\u003e\n\u003cli\u003eMiddleware\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"resources\"\u003eResources\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/aspnet/core/\" target=\"_blank\" rel=\"noopener\"\u003eMicrosoft Learn: ASP.NET Core\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSpanish course: \u003ca href=\"https://www.youtube.com/watch?v=ayGZztA6VtE\" target=\"_blank\" rel=\"noopener\"\u003eComplete ASP.NET Core MVC Course (YouTube - Luis Beltrán)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Data Access with Entity Framework Core --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003e(4) Data Access with Entity Framework Core\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"topics\"\u003eTopics\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDefining models and relationships\u003c/li\u003e\n\u003cli\u003eDbContext and migrations\u003c/li\u003e\n\u003cli\u003eCRUD with LINQ and EF\u003c/li\u003e\n\u003cli\u003eFluent API vs Data Annotations\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"resources\"\u003eResources\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/ef/core/\" target=\"_blank\" rel=\"noopener\"\u003eEF Core Official Docs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTutorial: \u003ca href=\"https://learn.microsoft.com/en-us/ef/core/get-started/overview/first-app\" target=\"_blank\" rel=\"noopener\"\u003eGetting Started with EF Core\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- REST APIs with ASP.NET Core --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003e(5) REST APIs with ASP.NET Core\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"topics\"\u003eTopics\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCreating endpoints using \u003ccode\u003eApiController\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eModel validation (\u003ccode\u003eDataAnnotations\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eFilters (\u003ccode\u003eActionFilter\u003c/code\u003e, \u003ccode\u003eExceptionFilter\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eSwagger (API documentation)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"resources\"\u003eResources\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/aspnet/core/web-api/\" target=\"_blank\" rel=\"noopener\"\u003eMicrosoft Docs - Build Web APIs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCourse: \u003ca href=\"https://code-maze.com/net-core-web-development-part1/\" target=\"_blank\" rel=\"noopener\"\u003eREST API with .NET 6 (CodeMaze)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Security and Authentication --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003e(6) Security and Authentication\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"topics\"\u003eTopics\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eJWT Authentication and Authorization\u003c/li\u003e\n\u003cli\u003eIdentity Framework\u003c/li\u003e\n\u003cli\u003ePolicies and roles\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"resources\"\u003eResources\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://jasonwatmore.com/post/2021/07/18/net-5-jwt-authentication-tutorial-with-example-api\" target=\"_blank\" rel=\"noopener\"\u003eSecure ASP.NET Core with JWT\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCourse (YouTube): \u003ca href=\"https://www.youtube.com/watch?v=TDuUfjAeWT0\" target=\"_blank\" rel=\"noopener\"\u003eJWT Authentication in ASP.NET Core\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Testing --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003e(7) Testing\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"topics\"\u003eTopics\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003exUnit, NUnit\u003c/li\u003e\n\u003cli\u003eUnit testing and integration testing\u003c/li\u003e\n\u003cli\u003eMocking with Moq\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"resources\"\u003eResources\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://xunit.net/\" target=\"_blank\" rel=\"noopener\"\u003exUnit Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTutorial: \u003ca href=\"https://learn.microsoft.com/en-us/aspnet/core/test/unit-tests\" target=\"_blank\" rel=\"noopener\"\u003eUnit Testing in ASP.NET Core\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Other Resources --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eOther Resources\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"resources\"\u003eResources\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/readme\" target=\"_blank\" rel=\"noopener\"\u003eC# Language Specification\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Roadmap"},{"categories":null,"contents":" Getting Started What\u0026rsquo;s CSharp?\nC# is a high-level, general-purpose programming language developed by Microsoft as part of the .NET framework. It\u0026rsquo;s an object-oriented language, meaning it uses objects to structure code and data, and is used to build a variety of applications. C# is known for its ease of learning, strong community support, and ability to produce highly performant code.\n.NET SDK Instalation\nThe easiest way to have the .NET SDK installed in your personal computer is to download Visual Studio. You can also use other IDE, but you will need to install the SDK manually.\nHello World A sample C# program is show here.\n// See https://aka.ms/new-console-template for more information Console.WriteLine(\u0026#34;Hello, World!\u0026#34;); Run the program as below:\n$ dotnet run Program.cs Variables Normal Declaration:\nstring firstName = \u0026#34;Someone\u0026#34;; char userOption = \u0026#39;A\u0026#39;; int gameScore = 123; float percentage = 12.10; double portion = 4.556 decimal particlesPerMillion = 123.4567; bool processedCustomer = true; Implicitly Typed:\nvar message = \u0026#34;Hello world!\u0026#34;; Constant const int ConstNum = 5; ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/01-introduction/","summary":"\u003c!-- Getting Started --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eGetting Started\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eWhat\u0026rsquo;s CSharp?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eC# is a high-level, general-purpose programming language developed by Microsoft as part of the .NET framework. It\u0026rsquo;s an object-oriented language, meaning it uses objects to structure code and data, and is used to build a variety of applications. C# is known for its ease of learning, strong community support, and ability to produce highly performant code.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e.NET SDK Instalation\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe easiest way to have the .NET SDK installed in your personal computer is to download \u003ca href=\"https://visualstudio.microsoft.com/\" target=\"_blank\" rel=\"noopener\"\u003eVisual Studio\u003c/a\u003e. You can also use other IDE, but you will need to install the \u003ca href=\"https://dotnet.microsoft.com/en-us/download/visual-studio-sdks\" target=\"_blank\" rel=\"noopener\"\u003eSDK\u003c/a\u003e manually.\u003c/p\u003e","tags":null,"title":"Introduction"},{"categories":null,"contents":" Content Use Intention-Revealing Names Avoid Disinformation Make Meaningful Distinctions Use Pronounceable Names Use Searchable Names Avoid Encodings Avoid Mental Mapping Class Names Method Names Don\u0026rsquo;t Be Cute Pick One Word per Concept Don\u0026rsquo;t Pun Use Solution Domain Names Use Problem Domain Names Don\u0026rsquo;t Add Gratuitous Context Resources Use Intention-Revealing Names The name of a variable, function, or class, should answer all the big questions. It should tell you why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent.\nExample 1 Let\u0026rsquo;s say we want to define a variable to store elapsed time in days.\n// No question is answered. int d; // elapsed time in days // The name has now more sense. int elapsedTimeInDays; int daysSinceCreation; int daysSinceModification; int fileAgeInDays; Example 2 Let\u0026rsquo;s try to analyze what\u0026rsquo;s the purpose of this code:\nList\u0026lt;int[]\u0026gt; theList = new(); public List\u0026lt;int[]\u0026gt; GetThem() { List\u0026lt;int[]\u0026gt; list1 = new(); foreach (int[] x in theList) { if (x[0] == 4) {\tlist1.Add(x); } } return list1; } There are some questions we need to answer, so we can understand the code:\nWhat kinds of things are in theList? What is the significance of the zeroth subscript of an item in theList? What is the significance of the value 4? How would I use the list being returned? Let\u0026rsquo;s say we have the following context:\nWe\u0026rsquo;re working in a mine sweeper game. We find that the board is a list of cells called theList. Let\u0026rsquo;s rename that to gameBoard. Each cell on the board is represented by a simple array. We further find that the zeroth subscript is the location of a status value and that a status value of 4 means flagged. Just by giving these concepts names we can improve the code considerably:\nList\u0026lt;int[]\u0026gt; gameBoard = new(); const int StatusValue = 0; const int Flagged = 4; public List\u0026lt;int[]\u0026gt; GetFlaggedCells() { List\u0026lt;int[]\u0026gt; flaggedCells = new(); foreach (int[] cell in gameBoard) { if (cell[StatusValue] == Flagged) { flaggedCells.Add(cell); } } return flaggedCells; } The simplicity of the code has not changed, but the code has become much more explicit.\nThere\u0026rsquo;s a chance to make it even clearer by creating a class for cells instead of using array of int:\nList\u0026lt;int[]\u0026gt; gameBoard = new(); public class Cell { private int Status { get; set; } public bool IsFlagged() { ... // The logic to handle each status goes here. } } public List\u0026lt;Cell\u0026gt; GetFlaggedCells() { List\u0026lt;Cell\u0026gt; flaggedCells = new(); foreach (Cell cell in gameBoard) { if (cell.IsFlagged()) { flaggedCells.Add(cell); } } return flaggedCells; } Avoid Disinformation Programmers must avoid leaving false clues that obscure the meaning of code.\nExample 1 Do not use abbreviation.\nint hp; string aix; bool sco; Example 2 Do not refer to a grouping of accounts as an accountList unless it\u0026rsquo;s actually a List.\nDictionary\u0026lt;Account\u0026gt; accountList = new(); // If the container holding the accounts is not actually a List, it may lead to false conclusions. // A better way to name the variable would be: Dictionary\u0026lt;Account\u0026gt; accountGroup = new(); Dictionary\u0026lt;Account\u0026gt; bunchOfAccounts = new(); Dictionary\u0026lt;Account\u0026gt; accounts = new(); Example 3 How long does it take to spot the subtle difference between the following variables:\nstring XYZControllerForEfficientHandlingOfStrings; string XYZControllerForEfficientStorageOfStrings; Spelling similar concepts similarly is information. Using inconsistent spellings is disinformation. It is very helpful if names for very similar things sort together alphabetically and if the differences are very obvious\nExample 4 A truly awful example of disinformative names would be the use of lower-case L or uppercase O as variable names, especially in combination.\nint a = l; if ( O == l ) { a = O1; } else { l = 01; } The problem, of course, is that they look almost entirely like the constants one and zero, respectively.\nMake Meaningful Distinctions If names must be different, then they should also mean something different.\nExample 1 Number-series naming (a1, a2, .. aN) is the opposite of intentional naming.\n// a1 and a2 variables doesn\u0026#39;t have any meaningful distinction. public static void CopyChars(char[] a1, char[] a2) { for (int i = 0; i \u0026lt; a1.Length; i++) { a2[i] = a1[i]; } } // If we call them source and destination, they mean something different. public static void CopyChars(char[] source, char[] destination) { for (int i = 0; i \u0026lt; source.Length; i++) { destination[i] = source[i]; } } Example 2 Noise words are another meaningless distinction.\npublic class Product { ... } public class ProductInfo { // This class name doesnt have a different meaning than Product class ... } public class ProductData { // This class name doesnt have a different meaning than Product class ... } Example 3 Some other recommendations.\n// Wrong use of some words. string NameVariable; string NameString; string[] UsersTable; Customer customerObject = new(); CustomerObject customer = new(); // Avoid using type words. string Name; string[] Users; Customer customer = new(); Use Pronounceable Names Make your names pronounceable. If you can\u0026rsquo;t pronounce it, you can\u0026rsquo;t discuss it without sounding like an idiot.\nExample // Wrong use pronounceable names. class DtaRcrd102 { private DateTime Genymdhms; private DateTime Modymdhms; private String Pszqint = \u0026#34;102\u0026#34;; ... }; // Meaninful names and easy to pronounce. class Customer { private DateTime GenerationTimestamp; private DateTime ModificationTimestamp; private String RecordId = \u0026#34;102\u0026#34;; }; Use Searchable Names If a variable or constant might be seen or used in multiple places in a body of code, it is imperative to give it a search-friendly name.\nExample // Short variable names which are not useful for searching. int s = 0; int t[] = [1, 2, 3, 4, 5, 6, ...]; for (int j=0; j\u0026lt;34; j++) { s += (t[j]*4)/5; } // Meaninful names and are useful for searching. int realDaysPerIdealDay = 4; int realdays = 3; const int WORK_DAYS_PER_WEEK = 5; const int NUMBER_OF_TASKS = 34; int sum = 0; int taskEstimate[] = [1, 2, 3, 4, 5, 6, ...]; for (int j=0; j \u0026lt; NUMBER_OF_TASKS; j++) { int realTaskDays = taskEstimate[j] * realDaysPerIdealDay; int realTaskWeeks = (realdays / WORK_DAYS_PER_WEEK); sum += realTaskWeeks; } Avoid Encodings Encoding type or scope information into names simply adds an extra burden of deciphering.\nHungarian Notation Hungarian Notation is a naming convention in programming where variable and function names include information about their type, purpose, or intended use.\n// Given we have a phone number variable in string type, we declare the following: string phoneString; // We then change the type to Phone Number: PhoneNumber phoneString; // The name will not changed when type changed! Member Prefixes You also don\u0026rsquo;t need to prefix member variables with m_ anymore.\n// Using a short name for description. You need to have a comment explaining the context of the variable. public class Part { private string m_dsc; // The textual description void SetName(String name) { m_dsc = name; } } // Using a meaninful name for description. It\u0026#39;s not required any extra comment to explain what does the variable is used to. public class Part { string Description; void SetDescription(String description) { this.description = description; } } Interfaces and Implementations Interfaces and implementations will have the same name, so we need to somehow difference them.\npublic interface IAnimal { ... } public class Animal : IAnimal { ... } Avoid Mental Mapping Readers shouldn\u0026rsquo;t have to mentally translate your names into other names they already know. This problem generally arises from a choice to use neither problem domain terms nor solution domain terms.\nstring[] groups = [ .... ]; string[] people = [ .... ]; // Using traditional i and j variables, so we need to have a mental mapping that i is iterating groups and j is iterating people. for (int i = 0; i \u0026lt; groups.Length; i++) { for (int j = 0; j \u0026lt; people.Length; j++) { ... } } // If we use meaninful names for groupId and personId, then we don\u0026#39;t need to have a mental mapping. for (int groupId = 0; groupId \u0026lt; groups.Length; groupId++) { for (int personId = 0; personId \u0026lt; people.Length; personId++) { ... } } Class Names // Classes and objects should have noun or noun phrase names. public class Customer { ... } public class WikiPage { ... } public class Account { ... } public class AddressParser { ... } // Avoid words like Manager, Processor, Data, or Info in the name of a class. public class CustomerData { ... } public class CustomerInfo { ... } // A class name should not be a verb. public class Eating { ... } Method Names Methods should have verb or verb phrase names.\npublic void PostPayment() { ... } public void DeletePage() { ... } public void Save() { ... } public void IsPosted() { ... } Don\u0026#39;t Be Cute If names are too clever, they will be memorable only to people who share the author\u0026rsquo;s sense of humor, and only as long as these people remember the joke.\n// Cute but not meaninful. public void HolyHandGrenade() { ... } // Meaninful named method. public void DeleteItems() { ... } Pick One Word per Concept Pick one word for one abstract concept and stick with it.\n// Using different names for the same purpose. public class UserService { public List\u0026lt;User\u0026gt; Fetch() { ... } } public class GroupService { public List\u0026lt;Group\u0026gt; Retrieve() { ... } } public class TaskService { public List\u0026lt;Task\u0026gt; Get() { ... } } // Using one same name for the same purpose. public class UserService { public List\u0026lt;User\u0026gt; Get() { ... } } public class GroupService { public List\u0026lt;Group\u0026gt; Get() { ... } } public class TaskService { public List\u0026lt;Task\u0026gt; Get() { ... } } Don\u0026#39;t Pun Avoid using the same word for two purposes. Using the same term for two different ideas is essentially a pun.\n// Using the same name for diffent purposes. public class UserService { public void Add(User user) { ... } // This method let us create a new user. } public class GroupService { public void Add(Group group, User user) { ... } // This method let us insert a user into a group. } // Using the appropriate name for each purpose. public class UserService { public void Create(User user) { ... } // This method let us create a new user. } public class GroupService { public void Insert(Group group, User user) { ... } // This method let us insert a user into a group. } Use Solution Domain Names Remember that the people who read your code will be programmers. So go ahead and use computer science (CS) terms, algorithm names, pattern names, math terms, and so forth.\nThe name AccountVisitor means a great deal to a programmer who is familiar with the VISITOR pattern. What programmer would not know what a JobQueue was? There are lots of very technical things that programmers have to do. Choosing technical names for those things is usually the most appropriate course.\nUse Problem Domain Names If there are no programming terms, we can use terms related to the feature or business.\nExample public class Account { private string AccountBalance; // This variable name has no programming terms, so it\u0026#39;s related to the bussiness. } Separating solution and problem domain concepts is part of the job of a good programmer and designer. The code that has more to do with problem domain concepts should have names drawn from the problem domain.\nAdd Meaningful Context There are a few names which are meaningful in and of themselves—most are not. Instead, you need to place names in context for your reader by enclosing them in well-named classes, methods, functions, etc.\n// We have several fields that doesn\u0026#39;t have a clear context public class User { public string FirstName { get; set; } public string LastName { get; set; } public string Street { get; set; } public int HouseNumber { get; set; } public string City { get; set; } public string State { get; set; } public string Zipcode { get; set; } } User user = new(); // In this context, we only know the State property is part of the user. Console.WriteLine(user.State); // In this context, we only know the State propertyis part of the user\u0026#39;s address Console.WriteLine(user.Street); Console.WriteLine(user.HouseNumber); Console.WriteLine(user.City); Console.WriteLine(user.State); // public class Address { public string Street { get; set; } public int HouseNumber { get; set; } public string City { get; set; } public string State { get; set; } public string Zipcode { get; set; } } public class User { public string FirstName { get; set; } public string LastName { get; set; } public Address Address { get; set; } } User user = new(); // In this context, we do know the State property is part of the user\u0026#39;s address. Console.WriteLine(user.Address.State); Don\u0026#39;t Add Gratuitous Context In an imaginary application called \u0026ldquo;Gas Station Deluxe,\u0026rdquo; it is a bad idea to prefix every class with GSD. Frankly, you are working against your tools. You type G and press the completion key and are rewarded with a mile-long list of every class in the system. Is that wise? Why make it hard for the IDE to help you?\n// Likewise, say you invented a \u0026#34;MailingAddress\u0026#34; class in GSD\u0026#39;s accounting module, and you named it \u0026#34;GSDAccountAddress\u0026#34; public class GSDAccountAddress { ... } // Later, you need a mailing address for your customer contact application. Do you use \u0026#34;GSDAccountCustomer\u0026#34;? Does it sound like the right name? Some characters are redundant or irrelevant. public class GSDAccountCustomer { ... } // The names \u0026#34;accountAddress\u0026#34; and \u0026#34;customerAddress\u0026#34; are fine names for instances of the class \u0026#34;Address\u0026#34; but could be poor names for classes. public class Address { ... } Address accountAddress = new(); Address customerAddress = new(); Shorter names are generally better than longer ones, so long as they are clear. Add no more context to a name than is necessary.\nResources Clean Code: A Handbook of Agile Software Craftsmanship, by Robert C. Martin Identifier name - rules and conventions - C# | Microsoft Learn .NET Coding Conventions - C# | Microsoft Learn Clean Code in C# Part 1 Meaningful Names - DEV Community ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/01-meaningful-names/","summary":"\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eContent\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003col\u003e\n\u003cli\u003eUse Intention-Revealing Names\u003c/li\u003e\n\u003cli\u003eAvoid Disinformation\u003c/li\u003e\n\u003cli\u003eMake Meaningful Distinctions\u003c/li\u003e\n\u003cli\u003eUse Pronounceable Names\u003c/li\u003e\n\u003cli\u003eUse Searchable Names\u003c/li\u003e\n\u003cli\u003eAvoid Encodings\u003c/li\u003e\n\u003cli\u003eAvoid Mental Mapping\u003c/li\u003e\n\u003cli\u003eClass Names\u003c/li\u003e\n\u003cli\u003eMethod Names\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Be Cute\u003c/li\u003e\n\u003cli\u003ePick One Word per Concept\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Pun\u003c/li\u003e\n\u003cli\u003eUse Solution Domain Names\u003c/li\u003e\n\u003cli\u003eUse Problem Domain Names\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Add Gratuitous Context\u003c/li\u003e\n\u003cli\u003eResources\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eUse Intention-Revealing Names\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eThe name of a variable, function, or class, should answer all the big questions. It should tell you why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent.\u003c/p\u003e","tags":null,"title":"Meaningful Names"},{"categories":null,"contents":" Data Types There are two different data types in C#:\nValue Types: Directly store the data. Once you assign a value, it holds that data int, char, float are just a few examples. Reference Types: Store a memory address. They point to the address of the value. string, class, array are commonly used. Integer Math operations:\nint sum = 7 + 5; int difference = 7 - 5; int product = 7 * 5; int quotient = 7 / 5; int modulus = 7 % 5; Console.WriteLine(\u0026#34;Sum: \u0026#34; + sum); // Sum: 12 Console.WriteLine(\u0026#34;Difference: \u0026#34; + difference); // Difference: 2 Console.WriteLine(\u0026#34;Product: \u0026#34; + product); // Product: 35 Console.WriteLine(\u0026#34;Quotient: \u0026#34; + quotient); // Quotient: 1 Console.WriteLine($\u0026#34;Modulus: {7 % 5}\u0026#34;); // Modulus: 2 Order of operations\nIn math, PEMDAS is an acronym that helps students remember the order of operations. The order is:\nParentheses (whatever is inside the parenthesis is performed first) Exponents Multiplication and Division (from left to right) Addition and Subtraction (from left to right) Increment and decrement\nint value = 1; value = value + 1; Console.WriteLine(\u0026#34;First increment: \u0026#34; + value); // First increment: 2 value += 1; Console.WriteLine(\u0026#34;Second increment: \u0026#34; + value); // Second increment: 3 value++; Console.WriteLine(\u0026#34;Third increment: \u0026#34; + value); // Third increment: 4 value = value - 1; Console.WriteLine(\u0026#34;First decrement: \u0026#34; + value); // First decrement: 3 value -= 1; Console.WriteLine(\u0026#34;Second decrement: \u0026#34; + value); // Second decrement: 2 value--; Console.WriteLine(\u0026#34;Third decrement: \u0026#34; + value); // Third decrement: 1 String Combine String using character escape sequences:\n// Character escape sequences Console.WriteLine(\u0026#34;Hello\\nWorld!\u0026#34;); Console.WriteLine(\u0026#34;Hello\\tWorld!\u0026#34;); Console.WriteLine(\u0026#34;Hello \\\u0026#34;World\\\u0026#34;!\u0026#34;); // Hello \u0026#34;World\u0026#34;! Console.WriteLine(\u0026#34;c:\\\\source\\\\repos\u0026#34;); // c:\\source\\repos // Verbatim string literal Console.WriteLine(@\u0026#34; c:\\source\\repos (this is where your code goes)\u0026#34;); // c:\\source\\repos // (this is where your code goes) // Unicode escape character Console.WriteLine(\u0026#34;\\u3053\\u3093\\u306B\\u3061\\u306F World!\u0026#34;); // こんにちは World! Combine String using string concatenation:\nstring firstName = \u0026#34;Bob\u0026#34;; string greeting = \u0026#34;Hello\u0026#34;; string message = greeting + \u0026#34; \u0026#34; + firstName + \u0026#34;!\u0026#34;; Console.WriteLine(message); // Hello Bob! Combine String using string interpolation:\nstring firstName = \u0026#34;Bob\u0026#34;; string greeting = \u0026#34;Hello\u0026#34;; Console.WriteLine($\u0026#34;{greeting} {firstName}!\u0026#34;); // Hello Bob! // Combine verbatim literals and string interpolation string projectName = \u0026#34;First-Project\u0026#34;; Console.WriteLine($@\u0026#34;C:\\Output\\{projectName}\\Data\u0026#34;); // C:\\Output\\First-Project\\Data Array Declaration:\nstring[] customerIds = new string[3]; string[] customerIds = [ \u0026#34;A123\u0026#34;, \u0026#34;B456\u0026#34;, \u0026#34;C789\u0026#34; ]; // Introduced in C#12 string[] customerIds = { \u0026#34;A123\u0026#34;, \u0026#34;B456\u0026#34;, \u0026#34;C789\u0026#34; }; // Older version Assigning values:\nstring[] customerIds = new string[3]; customerIds[0] = \u0026#34;C123\u0026#34;; customerIds[1] = \u0026#34;C456\u0026#34;; customerIds[2] = \u0026#34;C789\u0026#34;; Size of the array:\nstring[] customerIds = [ \u0026#34;A123\u0026#34;, \u0026#34;B456\u0026#34;, \u0026#34;C789\u0026#34; ]; Console.WriteLine($\u0026#34;There are {customerIds.Length} customers.\u0026#34;); Tuples Declaration:\nvar pt = (X: 1, Y: 2); var slope = (double)pt.Y / (double)pt.X; Console.WriteLine($\u0026#34;A line from the origin to the point {pt} has a slope of {slope}.\u0026#34;); // A line from the origin to the point (1, 2) has a slope of 2. ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/02-types/","summary":"\u003c!-- Data types --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eData Types\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eThere are two different data types in C#:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eValue Types:\u003c/strong\u003e Directly store the data. Once you assign a value, it holds that data\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eint\u003c/code\u003e, \u003ccode\u003echar\u003c/code\u003e, \u003ccode\u003efloat\u003c/code\u003e are just a few examples.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReference Types:\u003c/strong\u003e Store a memory address. They point to the address of the value.\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estring\u003c/code\u003e, \u003ccode\u003eclass\u003c/code\u003e, \u003ccode\u003earray\u003c/code\u003e are commonly used.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Integer data type --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eInteger\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eMath operations:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum = \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e + \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e difference = \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e - \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e product = \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e * \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e quotient = \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e / \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e modulus = \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e % \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sum: \u0026#34;\u003c/span\u003e + sum); \u003cspan style=\"color:#75715e\"\u003e// Sum: 12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Difference: \u0026#34;\u003c/span\u003e + difference); \u003cspan style=\"color:#75715e\"\u003e// Difference: 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Product: \u0026#34;\u003c/span\u003e + product); \u003cspan style=\"color:#75715e\"\u003e// Product: 35\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Quotient: \u0026#34;\u003c/span\u003e + quotient); \u003cspan style=\"color:#75715e\"\u003e// Quotient: 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Modulus: {7 % 5}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// Modulus: 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eOrder of operations\u003c/strong\u003e\u003c/p\u003e","tags":null,"title":"Data Types"},{"categories":null,"contents":" Content Small Do One Thing One Level of Abstraction per Function Switch Statements Use Descriptive Names Function Arguments Have No Side Effects Command Query Separation Prefer Exceptions to Returning Error Codes Don’t Repeat Yourself Structured Programming Resources Rules of functions It\u0026rsquo;s importance to create small, focused, and single-responsibility functions that are easy to understand, test, and maintain.\nSmall The first rule of functions is that they should be small. They should hardly ever be 20 lines long. This implies that the blocks within if statements, else statements, while statements, and so on should be one line long. Probably that line should be a function call. This also implies that functions should not be large enough to hold nested structures. Therefore, the indent level of a function should not be greater than one or two. Do One Thing Functions should do one thing, should do it well, and should do it only. Functions should not be able to be divided into more sections/functions. One Level of Abstraction per Function To make sure the functions are doing \u0026ldquo;one thing\u0026rdquo;, we need to make sure that the statements within the function are all at the same level of abstraction. We can follow the \u0026ldquo;The Stepdown Rule\u0026rdquo;. It\u0026rsquo;s all about reading code from top to bottom. This way each function introduces the next and make the code readable from top to bottom. Switch Statements It\u0026rsquo;s hard to make a small switch statement. It violates the Single Responsibility Principle (SRP) because there is more than one reason for it to change. It violates the Open Closed Principle8 (OCP) because it must change whenever new cases are added. They can be tolerated if they appear only once, are used to create polymorphic objects, and are hidden behind an inheritance Use Descriptive Names Function name should describes what the function does. The smaller and more focused a function is, the easier it is to choose a descriptive name. Don\u0026rsquo;t be afraid to make a name long. A long descriptive name is better than a short enigmatic name. Function Arguments The ideal number of arguments for a function is zero. Three arguments should be avoided where possible. Arguments should make sense with the function name. There are two very common reasons to pass a single argument into a function. You may be asking a question about that argument. Or you may be operating on that argument, transforming it into something else and returning it. Avoid using Flag Arguments. Use object arguments. // In this case, the first two arguments seem to be related. Circle MakeCircle(double x, double y, double radius); // We can abstract x and y into Point class, and have one instance instead. Circle MakeCircle(Point center, double radius); Function and arguments should form a very nice verb/noun pair. Have No Side Effects Your function promises to do one thing, so it should not do other hidden things. Command Query Separation Functions should either do something or answer something, but not both. Prefer Exceptions to Returning Error Codes Use try/catch to handle error instead of returning error codes as exceptions can be added without forcing any recompilation or redeployment. // Returning error codes from specific actions. if (DeletePage(page) == StatusOk) { if (registry.DeleteReference(page.name) == StatusOk) { if (configKeys.DeleteKey(page.name.makeKey()) == StatusOk) { Console.WriteLine(\u0026#34;page deleted\u0026#34;); } else { Console.WriteLine(\u0026#34;configKey not deleted\u0026#34;); } } else { Console.WriteLine(\u0026#34;deleteReference from registry failed\u0026#34;); } } else { Console.WriteLine(\u0026#34;delete failed\u0026#34;); return E_ERROR; } // We can replace the nested if statements with using try/catch. try { DeletePage(page); registry.DeleteReference(page.name); configKeys.DeleteKey(page.name.makeKey()); } catch (Exception e) { Console.WriteLine(e.Message); } Functions should do one thing. Error handing is one thing. Don’t Repeat Yourself In case you find some code that is being used, try to separate it into a reusable function. Structured Programming Edsger Dijkstra\u0026rsquo;s rule says \u0026ldquo;every function and every block within a function should have one entry and one exit\u0026rdquo;. Following these rules means that there should only be one return statement in a function, no break or continue statements in a loop, and never, ever, any goto statements. This rule provides significant benefit in large functions only. Resources Clean Code: A Handbook of Agile Software Craftsmanship, by Robert C. Martin Clean Code in C# Part 2 Methods - DEV Community ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/02-functions/","summary":"\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eContent\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003col\u003e\n\u003cli\u003eSmall\u003c/li\u003e\n\u003cli\u003eDo One Thing\u003c/li\u003e\n\u003cli\u003eOne Level of Abstraction per Function\u003c/li\u003e\n\u003cli\u003eSwitch Statements\u003c/li\u003e\n\u003cli\u003eUse Descriptive Names\u003c/li\u003e\n\u003cli\u003eFunction Arguments\u003c/li\u003e\n\u003cli\u003eHave No Side Effects\u003c/li\u003e\n\u003cli\u003eCommand Query Separation\u003c/li\u003e\n\u003cli\u003ePrefer Exceptions to Returning Error Codes\u003c/li\u003e\n\u003cli\u003eDon’t Repeat Yourself\u003c/li\u003e\n\u003cli\u003eStructured Programming\u003c/li\u003e\n\u003cli\u003eResources\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eRules of functions\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eIt\u0026rsquo;s importance to create small, focused, and single-responsibility functions that are easy to understand, test, and maintain.\u003c/p\u003e\n\u003ch4 id=\"small\"\u003eSmall\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe first rule of functions is that they should be small. They should hardly ever be 20 lines long.\u003c/li\u003e\n\u003cli\u003eThis implies that the blocks within \u003ccode\u003eif\u003c/code\u003e statements, \u003ccode\u003eelse\u003c/code\u003e statements, \u003ccode\u003ewhile\u003c/code\u003e statements, and so on should be one line long. Probably that line should be a function call.\u003c/li\u003e\n\u003cli\u003eThis also implies that functions should not be large enough to hold nested structures. Therefore, the indent level of a function should not be greater than one or two.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"do-one-thing\"\u003eDo One Thing\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFunctions should do one thing, should do it well, and should do it only.\u003c/li\u003e\n\u003cli\u003eFunctions should not be able to be divided into more sections/functions.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"one-level-of-abstraction-per-function\"\u003eOne Level of Abstraction per Function\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTo make sure the functions are doing \u0026ldquo;one thing\u0026rdquo;, we need to make sure that the statements within the function are all at the same level of abstraction.\u003c/li\u003e\n\u003cli\u003eWe can follow the \u0026ldquo;The Stepdown Rule\u0026rdquo;. It\u0026rsquo;s all about reading code from top to bottom. This way each function introduces the next and make the code readable from top to bottom.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"switch-statements\"\u003eSwitch Statements\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eIt\u0026rsquo;s hard to make a small \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/li\u003e\n\u003cli\u003eIt violates the Single Responsibility Principle (SRP) because there is more than one reason for it to change.\u003c/li\u003e\n\u003cli\u003eIt violates the Open Closed Principle8 (OCP) because it must change whenever new cases are added.\u003c/li\u003e\n\u003cli\u003eThey can be tolerated if they appear only once, are used to create polymorphic objects, and are hidden behind an inheritance\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"use-descriptive-names\"\u003eUse Descriptive Names\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFunction name should describes what the function does.\u003c/li\u003e\n\u003cli\u003eThe smaller and more focused a function is, the easier it is to choose a descriptive name.\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t be afraid to make a name long. A long descriptive name is better than a short enigmatic name.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"function-arguments\"\u003eFunction Arguments\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eThe ideal number of arguments for a function is zero.\u003c/li\u003e\n\u003cli\u003eThree arguments should be avoided where possible.\u003c/li\u003e\n\u003cli\u003eArguments should make sense with the function name. There are two very common reasons to pass a single argument into a function.\n\u003cul\u003e\n\u003cli\u003eYou may be asking a question about that argument.\u003c/li\u003e\n\u003cli\u003eOr you may be operating on that argument, transforming it into something else and returning it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eAvoid using Flag Arguments.\u003c/li\u003e\n\u003cli\u003eUse object arguments.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// In this case, the first two arguments seem to be related.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCircle MakeCircle(\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e x, \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e y, \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e radius);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// We can abstract x and y into Point class, and have one instance instead.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCircle MakeCircle(Point center, \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e radius);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eFunction and arguments should form a very nice verb/noun pair.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"have-no-side-effects\"\u003eHave No Side Effects\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eYour function promises to do one thing, so it should not do other hidden things.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"command-query-separation\"\u003eCommand Query Separation\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFunctions should either do something or answer something, but not both.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"prefer-exceptions-to-returning-error-codes\"\u003ePrefer Exceptions to Returning Error Codes\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUse try/catch to handle error instead of returning error codes as exceptions can be added without forcing any recompilation or redeployment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Returning error codes from specific actions.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (DeletePage(page) == StatusOk) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (registry.DeleteReference(page.name) == StatusOk)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (configKeys.DeleteKey(page.name.makeKey()) == StatusOk)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;page deleted\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;configKey not deleted\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;deleteReference from registry failed\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;delete failed\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e E_ERROR;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// We can replace the nested if statements with using try/catch.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  DeletePage(page);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  registry.DeleteReference(page.name);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  configKeys.DeleteKey(page.name.makeKey());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (Exception e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Console.WriteLine(e.Message);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eFunctions should do one thing. Error handing is one thing.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"dont-repeat-yourself\"\u003eDon’t Repeat Yourself\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eIn case you find some code that is being used, try to separate it into a reusable function.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"structured-programming\"\u003eStructured Programming\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eEdsger Dijkstra\u0026rsquo;s rule says \u0026ldquo;every function and every block within a function should have one entry and one exit\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eFollowing these rules means that there should only be one return statement in a function, no \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e statements in a loop, and never, ever, any \u003ccode\u003egoto\u003c/code\u003e statements.\u003c/li\u003e\n\u003cli\u003eThis rule provides significant benefit in large functions only.\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eResources\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cul\u003e\n\u003cli\u003e\u003cem\u003eClean Code: A Handbook of Agile Software Craftsmanship\u003c/em\u003e, by Robert C. Martin\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dev.to/caiocesar/clean-code-in-c-part-2-methods-58mb\" target=\"_blank\" rel=\"noopener\"\u003eClean Code in C# Part 2 Methods - DEV Community\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Functions"},{"categories":null,"contents":" Content Rules of comments Good comments Bad comments Resources Rules of comments Truth can only be found in one place: the code. Only the code can truly tell you what it does. It is the only source of truly accurate information. Therefore, though comments are sometimes necessary, we will expend significant energy to minimize them.\nOne of the more common motivations for writing comments is bad code.\nClear and expressive code with few comments is far superior to cluttered and complex code with lots of comments.\n// Using comments to explain the code: // Check to see if the employee is eligible for full benefits if ((employee.flags \u0026amp; HOURLY_FLAG) \u0026amp;\u0026amp; (employee.age \u0026gt; 65)) { ... } // Use the code to explain the behavior: if (employee.isEligibleForFullBenefits()) { ... } Good comments Some comments are necessary or beneficial.\nLegal Comments Copyright and authorship statements are necessary and reasonable things to put into a comment at the start of each source file. // Copyright (C) 2003,2004,2005 by Object Mentor, Inc. All rights reserved. // Released under the terms of the GNU General Public License version 2 or later. Informative Comments It is sometimes useful to provide basic information with a comment. For example, adding a comment to explain return value of an abstract method. // Returns an instance of the Responder being tested. protected abstract Responder responderInstance(); Explanation of Intent Sometimes a comment goes beyond just useful information about the implementation and provides the intent behind a decision. Example When comparing two objects, the author decided that he wanted to sort objects of his class higher than objects of any other. public int compareTo(Object o) { ... return 1; // we are greater because we are the right type. } Clarification Sometimes it is just helpful to translate the meaning of some obscure argument or return value into something that\u0026rsquo;s readable. Comments can be useful when the code is part of the standard library, or in code that you cannot. public string CompareStrings( string str1, string str2 ) { // Compare the values, using the CompareTo method on the first string. int cmpVal = str1.CompareTo(str2); if (cmpVal == 0) { // str1 == str2 return 0; } else if (cmpVal \u0026lt; 0) { // str1 \u0026lt; str2 return -1; } else { // str1 \u0026gt; str2 return 1; } } Warning of Consequences Sometimes it is useful to warn other programmers about certain consequences. // WARNING: This method directly modifies the database. // Any changes here will be permanent and irreversible. public void UpdateDatabase(Data data) { // Database update logic here } TODO Comments It is sometimes reasonable to leave \u0026ldquo;To do\u0026rdquo; notes in the form of //TODO comments. TODO comments let the team know that something needs to be done. TODOs are jobs that the programmer thinks should be done, but for some reason can\u0026rsquo;t do at the moment. // TODO: Implement error handling for database connection public void ConnectToDatabase(string connectionString) { // ... code to connect to the database ... } Amplification A comment may be used to amplify the importance of something that may otherwise seem inconsequential. string personName = \u0026#34; FirstName Lastname \u0026#34;; string[] fullName = fullname.Trim().Split(\u0026#39; \u0026#39;); // the trim is real important. It removes the starting and ending spaces that could cause the user instance to have unnecessary spaces in its parts. User user = new(); user.FirstName = fullName[0]; user.LastName = fullName[1]; Public APIs If you are writing a public API, then you should certainly write good comments for it. You can use javadocs for Java code or jsdocs for JavaScript. Bad comments Most comments fall into this category. Usually they are crutches or excuses for poor code or justifications for insufficient decisions, amounting to little more than the programmer talking to himself.\nSome examples Mumbling: Plopping in a comment just because you feel you should or because the process requires it, is a hack. Redundant Comments: The comment explains the same as you can deduce from function, variables, etc. It probably takes longer to read than the code itself. Misleading Comments: You find misinformation from the comment. Mandated Comments: It is just plain silly to have a rule that says that every variable must have a comment. Journal Comments: Sometimes people add a comment to the start of a module every time they edit it. Something like a changelog. Noise Comments: Sometimes you see comments that are nothing but noise. They restate the obvious and provide no new information. Position Markers: Sometimes programmers like to mark a particular position in a source file. Closing Brace Comments: Sometimes programmers will put special comments on closing braces. Attributions and Bylines: Source code control systems are very good at remembering who added what, when. There is no need to pollute the code with little bylines. Commented-Out Code: Few practices are as odious as commenting-out code. Don’t do this! Too Much Information: Don’t put interesting historical discussions or irrelevant descriptions of details into your comments. Inobvious Connection: The connection between a comment and the code it describes should be obvious. Function Headers: Short functions don’t need much description. A well-chosen name for a small function that does one thing is usually better than a comment header. Resources Clean Code: A Handbook of Agile Software Craftsmanship, by Robert C. Martin Clean Code in C# Part 3 Comments - DEV Community ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/03-comments/","summary":"\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eContent\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003col\u003e\n\u003cli\u003eRules of comments\u003c/li\u003e\n\u003cli\u003eGood comments\u003c/li\u003e\n\u003cli\u003eBad comments\u003c/li\u003e\n\u003cli\u003eResources\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eRules of comments\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eTruth can only be found in one place: the code. Only the code can truly tell you what it does. It is the only source of truly accurate information. Therefore, though comments are sometimes necessary, we will expend significant energy to minimize them.\u003c/p\u003e\n\u003cp\u003eOne of the more common motivations for writing comments is bad code.\u003c/p\u003e\n\u003cp\u003eClear and expressive code with few comments is far superior to cluttered and complex code with lots of comments.\u003c/p\u003e","tags":null,"title":"Comments"},{"categories":null,"contents":" Methods No params:\nConsole.WriteLine(\u0026#34;Generating random numbers:\u0026#34;); DisplayRandomNumbers(); // 17 29 46 36 3 void DisplayRandomNumbers() { Random random = new Random(); for (int i = 0; i \u0026lt; 5; i++) { Console.Write($\u0026#34;{random.Next(1, 100)} \u0026#34;); } Console.WriteLine(); } Using parameters:\nCountTo(5); void CountTo(int max) { for (int i = 0; i \u0026lt; max; i++) { Console.Write($\u0026#34;{i}, \u0026#34;); // 0, 1, 2, 3, 4 } } Optional parameters:\nCountTo(); void CountTo(int max = 10) { for (int i = 0; i \u0026lt; max; i++) { Console.Write($\u0026#34;{i}, \u0026#34;); // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 } } Returning values:\nint sum = SumTo(5); Console.Write($\u0026#34;sum: {sum}\u0026#34;); // sum: 15 int CountTo(int max) { int result = 0; for (int i = 1; i \u0026lt;= max; i++) { result += i; } return result; } Stateless The following code is stateless because it doesn\u0026rsquo;t require to store any state to work, you just call the static method WriteLine from Console class.\nConsole.WriteLine(\u0026#34;Hello World!\u0026#34;); Stateful The following code is stateful because it is required to store previous information of the state to calculate next random value.\nRandom dice = new Random(); int roll = dice.Next(1, 7); ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/03-methods/","summary":"\u003c!-- Methods --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eMethods\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eNo params:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Generating random numbers:\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDisplayRandomNumbers(); \u003cspan style=\"color:#75715e\"\u003e// 17 29 46 36 3 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e DisplayRandomNumbers() \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Random random = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Random();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u0026lt; \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e; i++) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Console.Write(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;{random.Next(1, 100)} \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eUsing parameters:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCountTo(\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e CountTo(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e max) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u0026lt; max; i++)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.Write(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;{i}, \u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// 0, 1, 2, 3, 4\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eOptional parameters:\u003c/strong\u003e\u003c/p\u003e","tags":null,"title":"Methods"},{"categories":null,"contents":" Condition if-else operator\nstring color = \u0026#34;black\u0026#34;; if (color == \u0026#34;black\u0026#34;) { Console.WriteLine(\u0026#34;It\u0026#39;s black.\u0026#34;); } else if (color == \u0026#34;white\u0026#34;) { Console.WriteLine(\u0026#34;It\u0026#39;s white.\u0026#34;); } else { Console.WriteLine(\u0026#34;It\u0026#39;s other color.\u0026#34;); } Conditional Operator\nint saleAmount = 1001; int discount = saleAmount \u0026gt; 1000 ? 100 : 50; Console.WriteLine($\u0026#34;Discount: {discount}\u0026#34;); Scope\nbool flag = true; if (flag) { int value = 10; Console.WriteLine($\u0026#34;Inside the code block: {value}\u0026#34;); // Prints value. } Console.WriteLine($\u0026#34;Outside the code block: {value}\u0026#34;); // Gives error because value is declared inside the if code block. Switch string fruit = \u0026#34;apple\u0026#34;; switch (fruit) { case \u0026#34;apple\u0026#34;: Console.WriteLine($\u0026#34;App will display information for apple.\u0026#34;); break; case \u0026#34;banana\u0026#34;: Console.WriteLine($\u0026#34;App will display information for banana.\u0026#34;); break; case \u0026#34;cherry\u0026#34;: Console.WriteLine($\u0026#34;App will display information for cherry.\u0026#34;); break; default: Console.WriteLine($\u0026#34;App will not display information about any fruit.\u0026#34;); break; } Loop Foreach\nstring[] names = { \u0026#34;Rowena\u0026#34;, \u0026#34;Robin\u0026#34;, \u0026#34;Bao\u0026#34; }; foreach (string name in names) { Console.WriteLine(name); // \u0026#34;Rowena\u0026#34;, \u0026#34;Robin\u0026#34;, \u0026#34;Bao\u0026#34; } For\nfor (int i = 0; i \u0026lt; 10; i++) { if (i \u0026gt; 5) { break; } Console.WriteLine(i); // 1, 2, 3, 4, 5 } Do-While\nRandom random = new Random(); int current = 0; do { current = random.Next(1, 11); if (current \u0026gt;= 8) { continue; } Console.WriteLine(current); } while (current != 7); While\nRandom random = new Random(); int current = random.Next(1, 11); while (current \u0026gt;= 3) { Console.WriteLine(current); current = random.Next(1, 11); } Console.WriteLine($\u0026#34;Last number: {current}\u0026#34;); ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/04-flow-control/","summary":"\u003c!-- Condition --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eCondition\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eif-else operator\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e color = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;black\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (color == \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;black\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;It\u0026#39;s black.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (color == \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;white\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;It\u0026#39;s white.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;It\u0026#39;s other color.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eConditional Operator\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e saleAmount = \u003cspan style=\"color:#ae81ff\"\u003e1001\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e discount = saleAmount \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e ? \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e : \u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Discount: {discount}\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eScope\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e flag = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (flag)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evalue\u003c/span\u003e = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Inside the code block: {value}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// Prints value.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Outside the code block: {value}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// Gives error because value is declared inside the if code block.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Switch Case --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eSwitch\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e fruit = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;apple\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e (fruit)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;apple\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;App will display information for apple.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;banana\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;App will display information for banana.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cherry\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;App will display information for cherry.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;App will not display information about any fruit.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Loop --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eLoop\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eForeach\u003c/strong\u003e\u003c/p\u003e","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Content Rules of formatting Vertical Formatting Horizontal Formatting Resources Rules of formatting The Purpose of Formatting Code formatting is about communication, and communication is the professional developer\u0026rsquo;s first order of business.\nVertical Formatting According to Robert C. Martin example, files long preferred to be 200 lines with an upper limit of 500 lines long.\nAlthough this should not be a hard and fast rule, it should be considered very desirable. Small files are usually easier to understand than large files are.\nThe Newspaper Metaphor Think of a well-written newspaper article. You read it vertically. At the top you expect a headline that will tell you what the story is about and allows you to decide whether it is something you want to read. The first paragraph gives you a synopsis of the whole story, hiding all the details while giving you the broad-brush concepts. As you continue downward, the details increase until you have all the dates, names, quotes, claims, and other minutia.\nHaving this example put on code formatting, we can think the following:\nFile name should be simple but explanatory. The name, by itself, should be sufficient to tell us whether we are in the right module or not. The topmost parts of the source file should provide the high-level concepts and algorithms. Detail should increase as we move downward, until at the end we find the lowest level functions and details in the source file. Vertical Openness Between Concepts Nearly all code is read left to right and top to bottom. Each line represents an expression or a clause, and each group of lines represents a complete thought. Those thoughts should be separated from each other with blank lines.\nVertical Density If openness separates concepts, then vertical density implies close association. So lines of code that are tightly related should appear vertically dense. For example, in a class, each property will follow the previous one, then we place a blank line to separate properties from methods.\nVertical Distance Concepts that are closely related should be kept vertically close to each other. Clearly this rule doesn\u0026rsquo;t work for concepts that belong in separate files. But then closely related concepts should not be separated into different files unless you have a very good reason. Indeed, this is one of the reasons that protected variables should be avoided.\nVariable Declarations: Variables should be declared as close to their usage as possible. Instance variables: They should be declared at the top of the class. This should not increase the vertical distance of these variables. Dependent Functions: If one function calls another, they should be vertically close, and the caller should be above the callee, if at all possible. Constants should be kept at an appropriate level; therefore, we pass them from the place where it makes sense to know it to the low-level function where it is actually used. Conceptual Affinity: The stronger the affinity the less vertical distance there should be between them. This affinity could be direct dependence \u0026ldquo;One function calling another, or A group of functions perform similar operation\u0026rdquo;, or it could be conceptual affinity \u0026ldquo;Share a common naming scheme or Perform variation of the same basic task\u0026rdquo;. Vertical Ordering In general we want function call dependencies to point in the downward direction. That is, a function that is called should be below a function that does the calling. This creates a nice flow down the source code module from high level to low level.\nHorizontal Formatting Programmers clearly prefer short lines. The old Hollerith limit of 80 is a bit arbitrary, and there should not be a problem to lines edging out to 100 or even 120. But beyond that is probably just careless.\nHorizontal Openness and Density Use horizontal white space to associate things that are strongly related and disassociate things that are weakly related.\nAssignment operators surrounded with white space. string name = \u0026#34;Fernando\u0026#34;; No space between function name and the opening parenthesis while placing space between the closing parenthesis and the curly brackets: GetFullName() { ... } Accentuate the precedence of operators. CalculateTotal() { // The factors have no white space between them because they are high precedence. // The terms are separated by white space because addition and subtraction are lower precedence. return 4*4 + 3*a*c; } Indentation A source file is a hierarchy rather like an outline. Each level of this hierarchy is a scope into which names can be declared and in which declarations and executable statements are interpreted.\nTo make this hierarchy of scopes visible, we indent the lines of source code in proportion to their position in the hiearchy.\nStatements at the level of the file, such as most class declarations, are not indented at all. Methods within a class are indented one level to the right of the class. Implementations of those methods are implemented one level to the right of the method declaration. Block implementations are implemented one level to the right of their containing block And so on … but we never ever break indentation. Resources Clean Code: A Handbook of Agile Software Craftsmanship, by Robert C. Martin Clean Code in C# Part 4 Formatting - DEV Community ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/04-formatting/","summary":"\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eContent\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003col\u003e\n\u003cli\u003eRules of formatting\u003c/li\u003e\n\u003cli\u003eVertical Formatting\u003c/li\u003e\n\u003cli\u003eHorizontal Formatting\u003c/li\u003e\n\u003cli\u003eResources\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eRules of formatting\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch4 id=\"the-purpose-of-formatting\"\u003eThe Purpose of Formatting\u003c/h4\u003e\n\u003cp\u003eCode formatting is about communication, and communication is the professional developer\u0026rsquo;s first order of business.\u003c/p\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eVertical Formatting\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eAccording to Robert C. Martin example, files long preferred to be 200 lines with an upper limit of 500 lines long.\u003c/p\u003e\n\u003cp\u003eAlthough this should not be a hard and fast rule, it should be considered very desirable. Small files are usually easier to understand than large files are.\u003c/p\u003e","tags":null,"title":"Formatting"},{"categories":null,"contents":" Casting Casting truncates the value.\ndecimal myDecimal = 3.14m; Console.WriteLine($\u0026#34;decimal: {myDecimal}\u0026#34;); // decimal: 3.14 int myInt = (int)myDecimal; Console.WriteLine($\u0026#34;int: {myInt}\u0026#34;); // int: 3 To String int first = 5; int second = 7; string message = first.ToString() + second.ToString(); Console.WriteLine(message); // 57 Parse string first = \u0026#34;5\u0026#34;; string second = \u0026#34;7\u0026#34;; int sum = int.Parse(first) + int.Parse(second); Console.WriteLine(sum); // 12 Parse string value = \u0026#34;102\u0026#34;; int result = 0; if (int.TryParse(value, out result)) { Console.WriteLine($\u0026#34;Measurement: {result}\u0026#34;); } else { Console.WriteLine(\u0026#34;Unable to report the measurement.\u0026#34;); } Convert Convert rounds the value.\nstring value1 = \u0026#34;5\u0026#34;; string value2 = \u0026#34;7\u0026#34;; int result = Convert.ToInt32(value1) * Convert.ToInt32(value2); Console.WriteLine(result); // 35 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/05-convert-data-types/","summary":"\u003c!-- Casting type to convert --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eCasting\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eCasting truncates the value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edecimal\u003c/span\u003e myDecimal = \u003cspan style=\"color:#ae81ff\"\u003e3.14\u003c/span\u003em;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;decimal: {myDecimal}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// decimal: 3.14\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e myInt = (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e)myDecimal;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;int: {myInt}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// int: 3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Convert number to string --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eTo String\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e first = \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e second = \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e message = first.ToString() + second.ToString();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(message); \u003cspan style=\"color:#75715e\"\u003e// 57\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Convert string to number using Parse() --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eParse\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e first = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;5\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e second = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;7\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum = \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e.Parse(first) + \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e.Parse(second);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(sum); \u003cspan style=\"color:#75715e\"\u003e// 12\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Convert string to number using TryParse() --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eParse\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evalue\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;102\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e result = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e.TryParse(\u003cspan style=\"color:#66d9ef\"\u003evalue\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eout\u003c/span\u003e result))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Measurement: {result}\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Unable to report the measurement.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Convert string to number using Convert class --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eConvert\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eConvert rounds the value.\u003c/p\u003e","tags":null,"title":"Data Type Conversion"},{"categories":null,"contents":" Content Rules of functions\nResources\nObjects and Data Structures Data Abstraction Abstraction is the process of hiding implementation details and exposing only the essential features of a system or component. As well, using proper names that don\u0026rsquo;t expose the implementation details.\nData/Object Anti-Symmetry Objects hide their data behind abstractions and expose functions that operate on that data. Data structure expose their data and have no meaningful functions. // Shared class public class Point { public double x; public double y; } // Procedural Code public class Square { public Point topLeft; public double side; } public class Rectangle { public Point topLeft; public double height; public double width; } public class Circle { public Point center; public double radius; } public class Geometry { public double PI = 3.141592653589793; public double area(Object shape) { if (shape is Square) { Square s = (Square)shape; return s.side * s.side; } else if (shape is Rectangle) { Rectangle r = (Rectangle)shape; return r.height * r.width; } else if (shape is Circle) { Circle c = (Circle)shape; return PI * c.radius * c.radius; } else { return 0; } } } // OO Code public interface Shape { double area(); } public class Square : Shape { private Point topLeft; private double side; public double area() { return side*side; } } public class Rectangle : Shape { private Point topLeft; private double height; private double width; public double area() { return height * width; } } public class Circle : Shape { private Point center; private double radius; public double PI = 3.141592653589793; public double area() { return PI * radius * radius; } } Procedural code (code using data structures) makes it easy to add new functions without changing the existing data structures. OO code, on the other hand, makes it easy to add new classes without changing existing functions. Procedural code makes it hard to add new data structures because all the functions must change. OO code makes it hard to add new functions because all the classes must change. The Law of Demeter There is a well-known heuristic called the Law of Demeter that says a module should not know about the innards of the objects it manipulates.\nMore precisely, the Law of Demeter says that a method f of a class C should only call the methods of these:\nC (Same class) An object created by f (Inside the same method) An object passed as an argument to f An object held in an instance variable of C Violation of the Law of Demeter Train Wrecks: In objects, avoid excessive chaining of method calls. It is usually best to split them up. Hybrids: This confusion sometimes leads to unfortunate hybrid structures that are half object and half data structure. Such hybrids make it hard to add new functions but also make it hard to add new data structures. Hiding Structure: Encapsulate implementation details. Data Transfer Objects (DTO) Data Transfer Objects (DTOs) are objects used to transfer data between different layers or components of a software system. DTOs are very useful structures, especially when communicating with databases or parsing messages from sockets, and so on. They often become the first in a series of translation stages that convert raw data in a database into objects in the application code.\nActive Records are special format of DTOs as they have navigational methods like save and find.\npublic class Address { private string Street { get; }; private string StreetExtra { get; }; private string City { get; }; private string State { get; }; private string Zip { get; }; public Address( string street, string streetExtra, string city, string state, string zip) { Street = street; StreetExtra = streetExtra; City = city; State = state; Zip = zip; } } Active Record Active Records are special forms of DTOs. They are data structures with public (or beanaccessed) variables; but they typically have navigational methods like save and find. Typically these Active Records are direct translations from database tables, or other data sources.\nResources Clean Code: A Handbook of Agile Software Craftsmanship, by Robert C. Martin Clean Code in C# Part 4 Formatting - DEV Community ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/01-software-design-and-architecture/01-clean-code/05-objects-and-data-structure/","summary":"\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eContent\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eRules of functions\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eResources\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eObjects and Data Structures\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch4 id=\"data-abstraction\"\u003eData Abstraction\u003c/h4\u003e\n\u003cp\u003eAbstraction is the process of hiding implementation details and exposing only the essential features of a system or component. As well, using proper names that don\u0026rsquo;t expose the implementation details.\u003c/p\u003e\n\u003ch4 id=\"dataobject-anti-symmetry\"\u003eData/Object Anti-Symmetry\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eObjects hide their data behind abstractions and expose functions that operate on that data.\u003c/li\u003e\n\u003cli\u003eData structure expose their data and have no meaningful functions.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Shared class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePoint\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e x;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e y;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Procedural Code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSquare\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Point topLeft;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e side;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRectangle\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Point topLeft;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e height;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e width;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCircle\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Point center;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e radius;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGeometry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e PI = \u003cspan style=\"color:#ae81ff\"\u003e3.141592653589793\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e area(Object shape)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (shape \u003cspan style=\"color:#66d9ef\"\u003eis\u003c/span\u003e Square) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Square s = (Square)shape;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e s.side * s.side;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (shape \u003cspan style=\"color:#66d9ef\"\u003eis\u003c/span\u003e Rectangle) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Rectangle r = (Rectangle)shape;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e r.height * r.width;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (shape \u003cspan style=\"color:#66d9ef\"\u003eis\u003c/span\u003e Circle) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      Circle c = (Circle)shape;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e PI * c.radius * c.radius;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// OO Code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eShape\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e area();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSquare\u003c/span\u003e : Shape {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e Point topLeft;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e side;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e area() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e side*side;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRectangle\u003c/span\u003e : Shape {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e Point topLeft;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e height;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e width;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e area() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e height * width;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCircle\u003c/span\u003e : Shape {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e Point center;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e radius;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e PI = \u003cspan style=\"color:#ae81ff\"\u003e3.141592653589793\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e area() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e PI * radius * radius;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eProcedural\u003c/code\u003e code (code using data structures) makes it easy to add new functions without changing the existing data structures. \u003ccode\u003eOO\u003c/code\u003e code, on the other hand, makes it easy to add new classes without changing existing functions.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProcedural\u003c/code\u003e code makes it hard to add new data structures because all the functions must change. \u003ccode\u003eOO\u003c/code\u003e code makes it hard to add new functions because all the classes must change.\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eThe Law of Demeter\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eThere is a well-known heuristic called the Law of Demeter that says a module should not know about the innards of the objects it manipulates.\u003c/p\u003e","tags":null,"title":"Objects and Data Structure"},{"categories":null,"contents":" Sort string[] pallets = [ \u0026#34;B14\u0026#34;, \u0026#34;A11\u0026#34;, \u0026#34;B12\u0026#34;, \u0026#34;A13\u0026#34; ]; Console.WriteLine(\u0026#34;Sorted...\u0026#34;); Array.Sort(pallets); foreach (var pallet in pallets) { Console.WriteLine($\u0026#34;-- {pallet}\u0026#34;); // A11, A13, B12, B14 } Reverse string[] pallets = [ \u0026#34;A11\u0026#34;, \u0026#34;A13\u0026#34;, \u0026#34;B12\u0026#34;, \u0026#34;B14\u0026#34; ]; Console.WriteLine(\u0026#34;Reversed...\u0026#34;); Array.Reverse(pallets); foreach (var pallet in pallets) { Console.WriteLine($\u0026#34;-- {pallet}\u0026#34;); // B14, B12, A13, A11 } Clear string[] pallets = [ \u0026#34;B14\u0026#34;, \u0026#34;A11\u0026#34;, \u0026#34;B12\u0026#34;, \u0026#34;A13\u0026#34; ]; Console.WriteLine(\u0026#34;\u0026#34;); Array.Clear(pallets, 0, 2); Console.WriteLine($\u0026#34;Clearing 2 ... count: {pallets.Length}\u0026#34;); foreach (var pallet in pallets) { Console.WriteLine($\u0026#34;-- {pallet}\u0026#34;); // null, null, B12, A13 } Resize string[] pallets = [\u0026#34;B14\u0026#34;, \u0026#34;A11\u0026#34;, \u0026#34;B12\u0026#34;, \u0026#34;A13\u0026#34; ]; Console.WriteLine(\u0026#34;\u0026#34;); Array.Resize(ref pallets, 6); Console.WriteLine($\u0026#34;Resizing 6 ... count: {pallets.Length}\u0026#34;); pallets[4] = \u0026#34;C01\u0026#34;; pallets[5] = \u0026#34;C02\u0026#34;; foreach (var pallet in pallets) { Console.WriteLine($\u0026#34;-- {pallet}\u0026#34;); // B14, A11, B12, A13, C01, C02 } Join char[] valueArray = [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;] Array.Reverse(valueArray); // string result = new string(valueArray); string result = String.Join(\u0026#34;|\u0026#34;, valueArray); // a|b|c Console.WriteLine(result); Split string result = \u0026#34;123|456|789\u0026#34;; string[] items = result.Split(\u0026#39;|\u0026#39;); foreach (string item in items) { Console.WriteLine(item); // 123, 456, 789 } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/06-methods-on-arrays/","summary":"\u003c!-- Sorting an array --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eSort\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] pallets = [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B14\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A11\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B12\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A13\u0026#34;\u003c/span\u003e ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Sorted...\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eArray.Sort(pallets);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e pallet \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e pallets)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;-- {pallet}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// A11, A13, B12, B14\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Reverse an array --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eReverse\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] pallets = [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A11\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A13\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B12\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B14\u0026#34;\u003c/span\u003e ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Reversed...\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eArray.Reverse(pallets);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e pallet \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e pallets)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;-- {pallet}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// B14, B12, A13, A11\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Clear an array --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eClear\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] pallets = [ \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B14\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A11\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B12\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A13\u0026#34;\u003c/span\u003e ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eArray.Clear(pallets, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Clearing 2 ... count: {pallets.Length}\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e pallet \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e pallets)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;-- {pallet}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// null, null, B12, A13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Resize an array --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eResize\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] pallets =  [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B14\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A11\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;B12\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;A13\u0026#34;\u003c/span\u003e ];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eArray.Resize(\u003cspan style=\"color:#66d9ef\"\u003eref\u003c/span\u003e pallets, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Resizing 6 ... count: {pallets.Length}\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epallets[\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C01\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epallets[\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;C02\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e pallet \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e pallets)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;-- {pallet}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// B14, A11, B12, A13, C01, C02\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Join an array --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eJoin\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e[] valueArray = [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;b\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eArray.Reverse(valueArray);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// string result = new string(valueArray);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e result = String.Join(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;|\u0026#34;\u003c/span\u003e, valueArray); \u003cspan style=\"color:#75715e\"\u003e// a|b|c\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(result);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Split an array --\u003e\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eSplit\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e result = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;123|456|789\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] items = result.Split(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;|\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e item \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e items)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   Console.WriteLine(item); \u003cspan style=\"color:#75715e\"\u003e// 123, 456, 789\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Methods on Arrays"},{"categories":null,"contents":"\rComposite Formatting string first = \u0026#34;Hello\u0026#34;; string second = \u0026#34;World\u0026#34;; string result = string.Format(\u0026#34;{0} {1}!\u0026#34;, first, second); Console.WriteLine(result); // Hello World! Formatting Currency decimal price = 123.45m; int discount = 50; Console.WriteLine($\u0026#34;Price: {price:C} (Save {discount:C})\u0026#34;); // Price: $123.45 (Save $50.00) Formatting Numbers decimal measurement = 123456.78912m; Console.WriteLine($\u0026#34;Measurement: {measurement:N} units\u0026#34;); // Measurement: 123,456.79 units Console.WriteLine($\u0026#34;Measurement: {measurement:N4} units\u0026#34;); // Measurement: 123,456.7891 units Formatting Percentage decimal tax = .36785m; Console.WriteLine($\u0026#34;Tax rate: {tax:P2}\u0026#34;); // Tax rate: 36.79% Padding string input = \u0026#34;Pad this\u0026#34;; Console.WriteLine(input.PadLeft(12)); // \u0026#34; Pad this\u0026#34; Console.WriteLine(input.PadLeft(12, \u0026#39;*\u0026#39;)); // \u0026#34;****Pad this\u0026#34; Console.WriteLine(input.PadRight(12, \u0026#39;*\u0026#39;)); // \u0026#34;Pad this****\u0026#34; ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/07-data-formatting/","summary":"\u003c!-- Composite Formatting --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eComposite Formatting\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e first = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e second = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;World\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e result = \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e.Format(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{0} {1}!\u0026#34;\u003c/span\u003e, first, second);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(result); \u003cspan style=\"color:#75715e\"\u003e// Hello World!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Formatting Currency --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eFormatting Currency\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edecimal\u003c/span\u003e price = \u003cspan style=\"color:#ae81ff\"\u003e123.45\u003c/span\u003em;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e discount = \u003cspan style=\"color:#ae81ff\"\u003e50\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Price: {price:C} (Save {discount:C})\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// Price: $123.45 (Save $50.00)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Formatting Numbers --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eFormatting Numbers\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edecimal\u003c/span\u003e measurement = \u003cspan style=\"color:#ae81ff\"\u003e123456.78912\u003c/span\u003em;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Measurement: {measurement:N} units\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// Measurement: 123,456.79 units\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Measurement: {measurement:N4} units\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// Measurement: 123,456.7891 units\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Formatting Percentage --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eFormatting Percentage\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edecimal\u003c/span\u003e tax = .\u003cspan style=\"color:#ae81ff\"\u003e36785\u003c/span\u003em;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Tax rate: {tax:P2}\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// Tax rate: 36.79%\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Padding --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003ePadding\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e input = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Pad this\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(input.PadLeft(\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e)); \u003cspan style=\"color:#75715e\"\u003e// \u0026#34; \tPad this\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(input.PadLeft(\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*\u0026#39;\u003c/span\u003e)); \u003cspan style=\"color:#75715e\"\u003e// \u0026#34;****Pad this\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(input.PadRight(\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*\u0026#39;\u003c/span\u003e)); \u003cspan style=\"color:#75715e\"\u003e// \u0026#34;Pad this****\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Data Formatting"},{"categories":null,"contents":"\rIndexOf string message = \u0026#34;Find what is (inside the parentheses)\u0026#34;; int openingPosition = message.IndexOf(\u0026#39;(\u0026#39;); int closingPosition = message.IndexOf(\u0026#39;)\u0026#39;); Console.WriteLine(openingPosition); // 13 Console.WriteLine(closingPosition); // 36 Substring string message = \u0026#34;What is the value \u0026lt;span\u0026gt;between the tags\u0026lt;/span\u0026gt;?\u0026#34;; const string openSpan = \u0026#34;\u0026lt;span\u0026gt;\u0026#34;; const string closeSpan = \u0026#34;\u0026lt;/span\u0026gt;\u0026#34;; int openingPosition = message.IndexOf(openSpan); int closingPosition = message.IndexOf(closeSpan); openingPosition += openSpan.Length; int length = closingPosition - openingPosition; Console.WriteLine(message.Substring(openingPosition, length)); // between the tags LastIndexOf string message = \u0026#34;hello there!\u0026#34;; int first_h = message.IndexOf(\u0026#39;h\u0026#39;); int last_h = message.LastIndexOf(\u0026#39;h\u0026#39;); Console.WriteLine($\u0026#34;For the message: \u0026#39;{message}\u0026#39;, the first \u0026#39;h\u0026#39; is at position {first_h} and the last \u0026#39;h\u0026#39; is at position {last_h}.\u0026#34;); // For the message: \u0026#39;hello there!\u0026#39;, the first \u0026#39;h\u0026#39; is at position 0 and the last \u0026#39;h\u0026#39; is at position 7. IndexOfAny string message = \u0026#34;Hello, world!\u0026#34;; char[] charsToFind = { \u0026#39;a\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;i\u0026#39; }; int index = message.IndexOfAny(charsToFind); Console.WriteLine($\u0026#34;Found \u0026#39;{message[index]}\u0026#39; in \u0026#39;{message}\u0026#39; at index: {index}.\u0026#34;); // Found \u0026#39;e\u0026#39; in \u0026#39;Hello, world!\u0026#39; at index: 1. Remove string data = \u0026#34;12345John Smith 5000 3 \u0026#34;; string updatedData = data.Remove(5, 20); Console.WriteLine(updatedData); // 123455000 3 Replace string message = \u0026#34;This--is--ex-amp-le--da-ta\u0026#34;; message = message.Replace(\u0026#34;--\u0026#34;, \u0026#34; \u0026#34;); message = message.Replace(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;); Console.WriteLine(message); // This is example data Trim string greeting = \u0026#34; Hello World! \u0026#34;; Console.WriteLine($\u0026#34;[{greeting}]\u0026#34;); // \u0026#34; Hello World! \u0026#34; string trimmedGreeting = greeting.TrimStart(); Console.WriteLine($\u0026#34;[{trimmedGreeting}]\u0026#34;); // \u0026#34;Hello World! \u0026#34; trimmedGreeting = greeting.TrimEnd(); Console.WriteLine($\u0026#34;[{trimmedGreeting}]\u0026#34;); // \u0026#34; Hello World!\u0026#34; trimmedGreeting = greeting.Trim(); Console.WriteLine($\u0026#34;[{trimmedGreeting}]\u0026#34;); // \u0026#34;Hello World!\u0026#34; Contains string songLyrics = \u0026#34;You say goodbye, and I say hello\u0026#34;; Console.WriteLine(songLyrics.Contains(\u0026#34;goodbye\u0026#34;)); // True Console.WriteLine(songLyrics.Contains(\u0026#34;greetings\u0026#34;)); // False ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/08-string-methods/","summary":"\u003c!-- IndexOf --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eIndexOf\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e message = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Find what is (inside the parentheses)\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e openingPosition = message.IndexOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;(\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e closingPosition = message.IndexOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;)\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(openingPosition); \u003cspan style=\"color:#75715e\"\u003e// 13\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(closingPosition); \u003cspan style=\"color:#75715e\"\u003e// 36\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Substring --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eSubstring\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e message = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;What is the value \u0026lt;span\u0026gt;between the tags\u0026lt;/span\u0026gt;?\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e openSpan = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;span\u0026gt;\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e closeSpan = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;/span\u0026gt;\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e openingPosition = message.IndexOf(openSpan);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e closingPosition = message.IndexOf(closeSpan);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eopeningPosition += openSpan.Length;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e length = closingPosition - openingPosition;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(message.Substring(openingPosition, length)); \u003cspan style=\"color:#75715e\"\u003e// between the tags\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- LastIndexOf --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eLastIndexOf\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e message = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello there!\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e first_h = message.IndexOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;h\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e last_h = message.LastIndexOf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;h\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;For the message: \u0026#39;{message}\u0026#39;, the first \u0026#39;h\u0026#39; is at position {first_h} and the last \u0026#39;h\u0026#39; is at position {last_h}.\u0026#34;\u003c/span\u003e); \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// For the message: \u0026#39;hello there!\u0026#39;, the first \u0026#39;h\u0026#39; is at position 0 and the last \u0026#39;h\u0026#39; is at position 7.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- IndexOfAny --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eIndexOfAny\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e message = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e[] charsToFind = { \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;e\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;i\u0026#39;\u003c/span\u003e };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index = message.IndexOfAny(charsToFind);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Found \u0026#39;{message[index]}\u0026#39; in \u0026#39;{message}\u0026#39; at index: {index}.\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// Found \u0026#39;e\u0026#39; in \u0026#39;Hello, world!\u0026#39; at index: 1.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Remove --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eRemove\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e data = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;12345John Smith          5000  3  \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e updatedData = data.Remove(\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(updatedData); \u003cspan style=\"color:#75715e\"\u003e// 123455000  3  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Replace --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eReplace\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e message = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This--is--ex-amp-le--da-ta\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emessage = message.Replace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;--\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emessage = message.Replace(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(message); \u003cspan style=\"color:#75715e\"\u003e// This is example data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Trim --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eTrim\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e greeting = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;      Hello World!       \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;[{greeting}]\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// \u0026#34;      Hello World!       \u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e trimmedGreeting = greeting.TrimStart();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;[{trimmedGreeting}]\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// \u0026#34;Hello World!       \u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etrimmedGreeting = greeting.TrimEnd();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;[{trimmedGreeting}]\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// \u0026#34;      Hello World!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etrimmedGreeting = greeting.Trim();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;[{trimmedGreeting}]\u0026#34;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// \u0026#34;Hello World!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Contains --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eContains\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e songLyrics = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;You say goodbye, and I say hello\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(songLyrics.Contains(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;goodbye\u0026#34;\u003c/span\u003e)); \u003cspan style=\"color:#75715e\"\u003e// True\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(songLyrics.Contains(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;greetings\u0026#34;\u003c/span\u003e)); \u003cspan style=\"color:#75715e\"\u003e// False\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"String Methods"},{"categories":null,"contents":"\rDeclaring Classes // A type that is defined as a class is a reference type. //[access modifier] - [class] - [identifier] public class Customer { // Fields, properties, methods and events go here... } Creating Objects Customer object1 = new Customer(); // object1 is a reference to an allocated space that will know where the object exists. Customer object2; // Reference to null Customer object3 = new Customer(); Customer object4 = object3; // object4 has the same reference as object3. If any of both instances changes, the other one does as well. Not recommended to do that. Constructors and initialization Accept default values\nEvery .NET type has a default value. Typically, that value is 0 for number types, and null for all reference types. You can rely on that default value when it\u0026rsquo;s reasonable in your app.\nField initializers\npublic class Container { private int _capacity; public Container(int capacity) =\u0026gt; _capacity = capacity; } Primary Constructor\npublic class Container(int capacity) { private int _capacity = capacity; } Object initializer\npublic class Person { public required string LastName { get; set; } public required string FirstName { get; set; } } var p1 = new Person(); // Error! Required properties not set var p2 = new Person() { FirstName = \u0026#34;Grace\u0026#34;, LastName = \u0026#34;Hopper\u0026#34; }; ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/09-classes/","summary":"\u003c!-- Declaring Classes --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eDeclaring Classes\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// A type that is defined as a class is a reference type.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e//[access modifier] - [class] - [identifier]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCustomer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Fields, properties, methods and events go here...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Creating Objects --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eCreating Objects\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCustomer object1 = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Customer(); \u003cspan style=\"color:#75715e\"\u003e// object1 is a reference to an allocated space that will know where the object exists.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCustomer object2; \u003cspan style=\"color:#75715e\"\u003e// Reference to null\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCustomer object3 = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Customer(); \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCustomer object4 = object3; \u003cspan style=\"color:#75715e\"\u003e// object4 has the same reference as object3. If any of both instances changes, the other one does as well. Not recommended to do that.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Constructors and initialization --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eConstructors and initialization\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003e\u003cstrong\u003eAccept default values\u003c/strong\u003e\u003c/p\u003e","tags":null,"title":"Classes"},{"categories":null,"contents":"\rExample 1 abstract class Shape { public abstract int GetArea(); } class Square : Shape { private int _side; public Square(int n) =\u0026gt; _side = n; // GetArea method is required to avoid a compile-time error. public override int GetArea() =\u0026gt; _side * _side; static void Main() { var sq = new Square(12); Console.WriteLine($\u0026#34;Area of the square = {sq.GetArea()}\u0026#34;); } } // Output: Area of the square = 144 Example 2 // Abstract class abstract class BaseClass { protected int _x = 100; protected int _y = 150; // Abstract method public abstract void AbstractMethod(); // Abstract properties public abstract int X { get; } public abstract int Y { get; } } class DerivedClass : BaseClass { public override void AbstractMethod() { _x++; _y++; } public override int X // overriding property { get { return _x + 10; } } public override int Y // overriding property { get { return _y + 10; } } static void Main() { var o = new DerivedClass(); o.AbstractMethod(); Console.WriteLine($\u0026#34;x = {o.X}, y = {o.Y}\u0026#34;); } } // Output: x = 111, y = 161 Example 3 public abstract class Shape { public string Color { get; set; } // Constructor of the abstract class protected Shape(string color) { Color = color; Console.WriteLine($\u0026#34;Created a shape with color {color}.\u0026#34;); } // Abstract method that must be implemented by derived classes public abstract double CalculateArea(); } public class Square : Shape { public double Side { get; set; } // Constructor of the derived class calling the base class constructor public Square(string color, double side) : base(color) { Side = side; } public override double CalculateArea() { return Side * Side; } } public class Program { public static void Main(string[] args) { Square square = new Square(\u0026#34;red\u0026#34;, 5); Console.WriteLine($\u0026#34;Area of the square: {square.CalculateArea()}\u0026#34;); } } Resources Abstract keyword ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/10-abstract/","summary":"\u003c!-- Example 1 --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eExample 1\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eShape\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e GetArea();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSquare\u003c/span\u003e : Shape\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e _side;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Square(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) =\u0026gt; _side = n;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// GetArea method is required to avoid a compile-time error.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e GetArea() =\u0026gt; _side * _side;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e sq = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Square(\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Area of the square = {sq.GetArea()}\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Output: Area of the square = 144\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Example 2 --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eExample 2\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Abstract class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBaseClass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e _x = \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e _y = \u003cspan style=\"color:#ae81ff\"\u003e150\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Abstract method\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e AbstractMethod();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Abstract properties\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e X { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e Y { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDerivedClass\u003c/span\u003e : BaseClass\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e AbstractMethod()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    _x++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    _y++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e X   \u003cspan style=\"color:#75715e\"\u003e// overriding property\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e _x + \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e Y   \u003cspan style=\"color:#75715e\"\u003e// overriding property\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e _y + \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e o = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e DerivedClass();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    o.AbstractMethod();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;x = {o.X}, y = {o.Y}\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Output: x = 111, y = 161\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Example 3 --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eExample 3\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eShape\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Color { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Constructor of the abstract class\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e Shape(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e color)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Color = color;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Created a shape with color {color}.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Abstract method that must be implemented by derived classes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eabstract\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e CalculateArea();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSquare\u003c/span\u003e : Shape\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e Side { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Constructor of the derived class calling the base class constructor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Square(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e color, \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e side) : \u003cspan style=\"color:#66d9ef\"\u003ebase\u003c/span\u003e(color)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Side = side;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e CalculateArea()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Side * Side;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProgram\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] args)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Square square = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Square(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;red\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;Area of the square: {square.CalculateArea()}\u0026#34;\u003c/span\u003e);            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Resources --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eResources\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/abstract\" target=\"_blank\" rel=\"noopener\"\u003eAbstract keyword\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Abstract Classes"},{"categories":null,"contents":"\rDefinition A record in C# is a class or struct that provides special syntax and behavior for working with data models. The record modifier instructs the compiler to synthesize members that are useful for types whose primary role is storing data. These members include an overload of ToString() and members that support value equality.\nWhen to use Consider using a record in place of a class or struct in the following scenarios:\nYou want to define a data model that depends on value equality. You want to define a type for which objects are immutable. Record Types Declaration:\n// Value type: Stores all values public record Point(int X, int Y) { public double Slope() =\u0026gt; (double)Y / (double)X; } public static void Main() { Point pt = new Point(1, 1); var pt2 = pt with { Y = 10 }; double slope = pt.Slope(); Console.WriteLine($\u0026#34;The two points are {pt} and {pt2}\u0026#34;); // The two points are Point { X = 1, Y = 1 } and Point { X = 1, Y = 10 } Console.WriteLine($\u0026#34;The slope of {pt} is {slope}\u0026#34;); //The slope of Point { X = 1, Y = 1 } is 1 } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/11-records/","summary":"\u003c!-- Definition  --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eDefinition\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eA record in C# is a class or struct that provides special syntax and behavior for working with data models. The record modifier instructs the compiler to synthesize members that are useful for types whose primary role is storing data. These members include an overload of ToString() and members that support value equality.\u003c/p\u003e\n\u003ch3 id=\"when-to-use\"\u003eWhen to use\u003c/h3\u003e\n\u003cp\u003eConsider using a record in place of a class or struct in the following scenarios:\u003c/p\u003e","tags":null,"title":"Records"},{"categories":null,"contents":"\rDeclaration interface IEquatable\u0026lt;T\u0026gt; { bool Equals(T obj); } public class Car : IEquatable\u0026lt;Car\u0026gt; { public string? Make { get; set; } public string? Model { get; set; } public string? Year { get; set; } // Implementation of IEquatable\u0026lt;T\u0026gt; interface public bool Equals(Car? car) { return (this.Make, this.Model, this.Year) == (car?.Make, car?.Model, car?.Year); } } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/12-interfaces/","summary":"\u003c!-- Declaration --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eDeclaration\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIEquatable\u003c/span\u003e\u0026lt;T\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e Equals(T obj);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCar\u003c/span\u003e : IEquatable\u0026lt;Car\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring?\u003c/span\u003e Make { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring?\u003c/span\u003e Model { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring?\u003c/span\u003e Year { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Implementation of IEquatable\u0026lt;T\u0026gt; interface\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e Equals(Car? car)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.Make, \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.Model, \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.Year) ==\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      (car?.Make, car?.Model, car?.Year);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Interfaces"},{"categories":null,"contents":"\rDeclaration // Declare the generic class. public class GenericList\u0026lt;T\u0026gt; { public void Add(T item) { } } public class ExampleClass { } class TestGenericList { static void Main() { // Create a list of type int. GenericList\u0026lt;int\u0026gt; list1 = new(); list1.Add(1); // Create a list of type string. GenericList\u0026lt;string\u0026gt; list2 = new(); list2.Add(\u0026#34;\u0026#34;); // Create a list of type ExampleClass. GenericList\u0026lt;ExampleClass\u0026gt; list3 = new(); list3.Add(new ExampleClass()); } } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/13-generics/","summary":"\u003c!-- Declaration --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eDeclaration\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Declare the generic class.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eGenericList\u003c/span\u003e\u0026lt;T\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Add(T item) { }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eExampleClass\u003c/span\u003e { }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTestGenericList\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Create a list of type int.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    GenericList\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u0026gt; list1 = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    list1.Add(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Create a list of type string.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    GenericList\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\u0026gt; list2 = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    list2.Add(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Create a list of type ExampleClass.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    GenericList\u0026lt;ExampleClass\u0026gt; list3 = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    list3.Add(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ExampleClass());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Generics"},{"categories":null,"contents":"\rDeclaration var v = new { Amount = 108, Message = \u0026#34;Hello\u0026#34; }; // Rest the mouse pointer over v.Amount and v.Message in the following // statement to verify that their inferred types are int and string. Console.WriteLine(v.Amount + v.Message); ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/01-fundamentals/14-anonymous-types/","summary":"\u003c!-- Declaration --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eDeclaration\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e v = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e { Amount = \u003cspan style=\"color:#ae81ff\"\u003e108\u003c/span\u003e, Message = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Rest the mouse pointer over v.Amount and v.Message in the following\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// statement to verify that their inferred types are int and string.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(v.Amount + v.Message);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Anonymous Types"},{"categories":null,"contents":"\rPrinciples C# is an object-oriented programming language. The four basic principles of object-oriented programming are:\nEncapsulation: Hiding the internal state and functionality of an object and only allowing access through a public set of functions. Inheritance: Ability to create new abstractions based on existing abstractions. Polymorphism: Ability to implement inherited properties or methods in different ways across multiple abstractions. Abstraction: Modeling the relevant attributes and interactions of entities as classes to define an abstract representation of a system. Encapsulation Definition Encapsulation is sometimes referred to as the first pillar or principle of object-oriented programming. A class or struct can specify how accessible each of its members is to code outside of the class or struct. Members not intended for consumers outside of the class or assembly are hidden to limit the potential for coding errors or malicious exploits.\nMembers The following list includes all the various kinds of members that can be declared in a class, struct, or record.\nFields Constants Properties Methods Constructors Events Finalizers Indexers Operators Nested Types Accessibility Some methods and properties are meant to be called or accessed from code outside a class or struct, known as client code. Other methods and properties might be only for use in the class or struct itself. It\u0026rsquo;s important to limit the accessibility of your code so that only the intended client code can reach it. You specify how accessible your types and their members are to client code by using the following access modifiers:\npublic: Access is not restricted. protected: Access is limited to the containing class or types derived from the containing class. internal: Access is limited to the current assembly. protected internal: Access is limited to the current assembly or types derived from the containing class. private: Access is limited to the containing type. private protected: Access is limited to the containing class or types derived from the containing class within the current assembly. // Assembly1.cs public class OtherClass { internal static int intM = 0; } // Assembly2.cs using System; class ParentClass { public int a = 10; // No access restrictions. protected int b = 20; // Access from the ParentClass and any other class that inherits this one. internal int c = 30; // Access only on the same assembly. private int d = 40; // Access only on the same class. public int GetB() { return b; // OK } public int GetD() { return d; // OK } } class ChildClass : ParentClass { public void ChangeB(int newB) { b = newB; // OK } } class Program { static void Main() { var parent = new ParentClass(); var child = new ChildClass(); // var other = new OtherClass(); OK // public parent.a = 20; // OK // protected // parent.b ERROR // child.b ERROR // internal parent.c = 20; // OK child.c = 20; // OK // other.intM = 20; ERROR // private // parent.d ERROR // child.d ERROR } } Inheritance Classes (but not structs) support the concept of inheritance. A class that derives from another class, called the base class, automatically contains all the public, protected, and internal members of the base class except its constructors and finalizers.\n// Base class public class Animal { public virtual string Name { get; set; } public virtual void Eat() // virtual keyword allows to be overridden in a derived class. { Console.WriteLine(\u0026#34;Animal is eating.\u0026#34;); } } // Derived class public class Dog : Animal { private string _name; public string Breed { get; set; } public override string Name { get { return _name; } set { if (!string.IsNullOrEmpty(value)) { _name = value; } else { _name = \u0026#34;Unknown\u0026#34;; } } } public void Bark() { Console.WriteLine(\u0026#34;Dog is barking.\u0026#34;); } public override void Eat() // Because the Eat method is virtual, in a derived class it\u0026#39;s possible to use override method to change the body. { Console.WriteLine(\u0026#34;Dog is eating.\u0026#34;); // Overriding the Eat method } } Inheritance from abstract class abstract class Shape { public abstract int GetArea(); } class Square : Shape { private int _side; public Square(int n) =\u0026gt; _side = n; // GetArea method is required to avoid a compile-time error. public override int GetArea() =\u0026gt; _side * _side; static void Main() { var sq = new Square(12); Console.WriteLine($\u0026#34;Area of the square = {sq.GetArea()}\u0026#34;); } } // Output: Area of the square = 144 Polymorphism Polymorphism (meaning \u0026ldquo;many forms\u0026rdquo;) allows objects of different classes to be treated as objects of a common type. This is achieved through inheritance and method overriding.\npublic class Shape { // A few example members public int X { get; private set; } public int Y { get; private set; } public int Height { get; set; } public int Width { get; set; } // Virtual method public virtual void Draw() { Console.WriteLine(\u0026#34;Performing base class drawing tasks\u0026#34;); } } public class Circle : Shape { public override void Draw() { // Code to draw a circle... Console.WriteLine(\u0026#34;Drawing a circle\u0026#34;); base.Draw(); } } public class Rectangle : Shape { public override void Draw() { // Code to draw a rectangle... Console.WriteLine(\u0026#34;Drawing a rectangle\u0026#34;); base.Draw(); } } public class Triangle : Shape { public override void Draw() { // Code to draw a triangle... Console.WriteLine(\u0026#34;Drawing a triangle\u0026#34;); base.Draw(); } } class Program { static void Main() { var shapes = new List\u0026lt;Shape\u0026gt; { new Rectangle(), new Triangle(), new Circle() }; foreach (var shape in shapes) { shape.Draw(); } /* Output: Drawing a rectangle Performing base class drawing tasks Drawing a triangle Performing base class drawing tasks Drawing a circle Performing base class drawing tasks */ } } Hide base class members with new members public class BaseClass { public void DoWork() { WorkField++; } public int WorkField; public int WorkProperty { get { return 0; } } } public class DerivedClass : BaseClass { public new void DoWork() { WorkField++; } public new int WorkField; public new int WorkProperty { get { return 0; } } } class Program { static void Main() { DerivedClass B = new DerivedClass(); B.DoWork(); // Calls the new method. BaseClass A = (BaseClass)B; A.DoWork(); // Calls the old method. } } Prevent derived classes from overriding virtual members public class A { public virtual void DoWork() { } } public class B : A { public override void DoWork() { } } public class C : B { public sealed override void DoWork() { } // sealed keyword is used to prevent to override it on derived class. } public class D : C { public new void DoWork() { } // it\u0026#39;s possible to use the new keyword to declare a new method called DoWork for D class. } Access base class virtual members from derived classes public class Base { public virtual void DoWork() {/*...*/ } } public class Derived : Base { public override void DoWork() { //Perform Derived\u0026#39;s work here //... // Call DoWork on base class base.DoWork(); } } Abstraction Abstraction focuses on presenting only essential details to the user while hiding the complex implementation details. It involves defining abstract classes or interfaces that specify a contract (methods that must be implemented by derived classes) without providing concrete implementations.\npublic abstract class Shape { public abstract int GetArea(); } public class Square : Shape { private int _side; public Square(int n) =\u0026gt; _side = n; // GetArea method is required to avoid a compile-time error. public override int GetArea() =\u0026gt; _side * _side; static void Main() { var sq = new Square(12); Console.WriteLine($\u0026#34;Area of the square = {sq.GetArea()}\u0026#34;); } } // Output: Area of the square = 144 Resources Introduction to Classes Object-oriented C# Members Access modifiers ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/02-object-oriented-programming/01-principles/","summary":"\u003c!-- Four Principles --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003ePrinciples\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eC# is an object-oriented programming language. The four basic principles of object-oriented programming are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEncapsulation:\u003c/strong\u003e Hiding the internal state and functionality of an object and only allowing access through a public set of functions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInheritance:\u003c/strong\u003e Ability to create new abstractions based on existing abstractions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePolymorphism:\u003c/strong\u003e Ability to implement inherited properties or methods in different ways across multiple abstractions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAbstraction:\u003c/strong\u003e Modeling the relevant attributes and interactions of entities as classes to define an abstract representation of a system.\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Encapsulation --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eEncapsulation\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"definition\"\u003eDefinition\u003c/h3\u003e\n\u003cp\u003eEncapsulation is sometimes referred to as the first pillar or principle of object-oriented programming. A class or struct can specify how accessible each of its members is to code outside of the class or struct. Members not intended for consumers outside of the class or assembly are hidden to limit the potential for coding errors or malicious exploits.\u003c/p\u003e","tags":null,"title":"OOP Principles"},{"categories":null,"contents":" Content Use Intention-Revealing Names Avoid Disinformation Make Meaningful Distinctions Use Pronounceable Names Use Searchable Names Avoid Encodings Avoid Mental Mapping Class Names Method Names Don\u0026rsquo;t Be Cute Pick One Word per Concept Don\u0026rsquo;t Pun Use Solution Domain Names Use Problem Domain Names Don\u0026rsquo;t Add Gratuitous Context Resources Overview The first paradigm to be adopted (but not the first to be invented) was structured programming, which was discovered by Edsger Wybe Dijkstra in 1968. Dijkstra showed that the use of unrestrained jumps (goto statements) is harmful to program structure. As we\u0026rsquo;ll see in the chapters that follow, he replaced those jumps with the more familiar if/then/else and do/while/until constructs.\nWe can summarize the structured programming paradigm as follows:\nStructured programming imposes discipline on direct transfer of control.\nProof The problem that Dijkstra recognized, early on, was that programming is hard, and that programmers don\u0026rsquo;t do it very well.\nDijkstra\u0026rsquo;s solution was to apply the mathematical discipline of proof. His vision was the construction of a Euclidian hierarchy of postulates, theorems, corollaries, and lemmas.\nSame as mathematicians do, programmers should use proven structures, and tie them together with code that they would then prove correct themselves.\nDuring his investigation, Dijkstra discovered that certain uses of goto statements prevent modules from being decomposed recursively into smaller and smaller units, thereby preventing use of the divide-and-conquer approach necessary for reasonable proofs.\nOther uses of goto, however, did not have this problem. Dijkstra realized that these \u0026ldquo;good\u0026rdquo; uses of goto corresponded to simple selection and iteration control structures such as if/then/else and do/while. Modules that used only those kinds of control structures could be recursively subdivided into provable units.\nThis discovery was remarkable: The very control structures that made a module provable were the same minimum set of control structures from which all programs can be built. Thus structured programming was born.\nAs computer languages evolved, the goto statement moved ever rearward, until it all but disappeared.\nAt the end, there was no formal proof, and the Euclidean hierarchy of theorems was never built.\nFunctional Decomposition Structured programming allows modules to be recursively decomposed into provable units, which in turn means that modules can be functionally decomposed.\nBy following these disciplines, programmers could break down large proposed systems into modules and components that could be further broken down into tiny provable functions.\nScientific Method Given there was no formal proof, scientific method was then considered.\nScience is fundamentally different from mathematics, in that scientific theories and laws cannot be proven correct, but can demonstrated in several ways.\nScience does not work by proving statements true, but rather by proving statements false.\nResources Clean Architecture: A Craftsman\u0026rsquo;s Guide to Software Structure and Design, by Robert C. Martin ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/01-software-design-and-architecture/02-programming-paradigms/01-structured-programming/","summary":"\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eContent\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003col\u003e\n\u003cli\u003eUse Intention-Revealing Names\u003c/li\u003e\n\u003cli\u003eAvoid Disinformation\u003c/li\u003e\n\u003cli\u003eMake Meaningful Distinctions\u003c/li\u003e\n\u003cli\u003eUse Pronounceable Names\u003c/li\u003e\n\u003cli\u003eUse Searchable Names\u003c/li\u003e\n\u003cli\u003eAvoid Encodings\u003c/li\u003e\n\u003cli\u003eAvoid Mental Mapping\u003c/li\u003e\n\u003cli\u003eClass Names\u003c/li\u003e\n\u003cli\u003eMethod Names\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Be Cute\u003c/li\u003e\n\u003cli\u003ePick One Word per Concept\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Pun\u003c/li\u003e\n\u003cli\u003eUse Solution Domain Names\u003c/li\u003e\n\u003cli\u003eUse Problem Domain Names\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Add Gratuitous Context\u003c/li\u003e\n\u003cli\u003eResources\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eOverview\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eThe first paradigm to be adopted (but not the first to be invented) was structured programming, which was discovered by \u003cstrong\u003eEdsger Wybe Dijkstra\u003c/strong\u003e in 1968. Dijkstra showed that the use of unrestrained jumps (goto statements) is harmful to program structure. As we\u0026rsquo;ll see in the chapters that follow, he replaced those jumps with the more familiar if/then/else and do/while/until constructs.\u003c/p\u003e","tags":null,"title":"Structured Programming"},{"categories":null,"contents":" Content Use Intention-Revealing Names Avoid Disinformation Make Meaningful Distinctions Use Pronounceable Names Use Searchable Names Avoid Encodings Avoid Mental Mapping Class Names Method Names Don\u0026rsquo;t Be Cute Pick One Word per Concept Don\u0026rsquo;t Pun Use Solution Domain Names Use Problem Domain Names Don\u0026rsquo;t Add Gratuitous Context Resources Overview The second paradigm to be adopted was actually discovered two years earlier, in 1966, by Ole Johan Dahl and Kristen Nygaard. These two programmers noticed that the function call stack frame in the ALGOL language could be moved to a heap, thereby allowing local variables declared by a function to exist long after the function returned. The function became a constructor for a class, the local variables became instance variables, and the nested functions became methods. This led inevitably to the discovery of polymorphism through the disciplined use of function pointers.\nWe can summarize the object-oriented programming paradigm as follows:\nObject-oriented programming imposes discipline on indirect transfer of control.\nResources Clean Architecture: A Craftsman\u0026rsquo;s Guide to Software Structure and Design, by Robert C. Martin ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/01-software-design-and-architecture/02-programming-paradigms/02-object-oriented-programming/","summary":"\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eContent\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003col\u003e\n\u003cli\u003eUse Intention-Revealing Names\u003c/li\u003e\n\u003cli\u003eAvoid Disinformation\u003c/li\u003e\n\u003cli\u003eMake Meaningful Distinctions\u003c/li\u003e\n\u003cli\u003eUse Pronounceable Names\u003c/li\u003e\n\u003cli\u003eUse Searchable Names\u003c/li\u003e\n\u003cli\u003eAvoid Encodings\u003c/li\u003e\n\u003cli\u003eAvoid Mental Mapping\u003c/li\u003e\n\u003cli\u003eClass Names\u003c/li\u003e\n\u003cli\u003eMethod Names\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Be Cute\u003c/li\u003e\n\u003cli\u003ePick One Word per Concept\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Pun\u003c/li\u003e\n\u003cli\u003eUse Solution Domain Names\u003c/li\u003e\n\u003cli\u003eUse Problem Domain Names\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Add Gratuitous Context\u003c/li\u003e\n\u003cli\u003eResources\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eOverview\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eThe second paradigm to be adopted was actually discovered two years earlier, in 1966, by \u003cstrong\u003eOle Johan Dahl\u003c/strong\u003e and \u003cstrong\u003eKristen Nygaard\u003c/strong\u003e. These two programmers noticed that the function call stack frame in the ALGOL language could be moved to a heap, thereby allowing local variables declared by a function to exist long after the function returned. The function became a constructor for a class, the local variables became instance variables, and the nested functions became methods. This led inevitably to the discovery of polymorphism through the disciplined use of function pointers.\u003c/p\u003e","tags":null,"title":"Object-oriented Programming"},{"categories":null,"contents":"\rSOLID Definition SOLID is a set of five design principles that aim to make object-oriented software easier to understand, maintain, and extend. These principles were popularized by Robert C. Martin (Uncle Bob) in his 2000 paper \u0026ldquo;Design Principles and Design Patterns\u0026rdquo; and the acronym SOLID was coined a few years later.\nThe five SOLID principles are:\nSingle Responsibility Principle (SRP) Open-Closed Principle (OCP) Liskov Substitution Principle (LSP) Interface Segregation Principle (ISP) Dependency Inversion Principle (DIP) I\u0026rsquo;ll be using the same example from C# Clean Code: SOLID Principles – Dev.to, so as the initial code we have the following:\npublic class OrderItem { public string Name { get; set; } public decimal Price { get; set; } public int Quantity { get; set; } } public class Order { public int Id { get; set; } public List\u0026lt;OrderItem\u0026gt; Items { get; set; } public string CustomerType { get; set; } // \u0026#39;Regular\u0026#39;, \u0026#39;Premium\u0026#39; public Order() { Items = new List\u0026lt;OrderItem\u0026gt;(); } // Calculate order total public decimal GetTotal() { decimal total = 0; foreach (var item in Items) { total += item.Price * item.Quantity; } // Apply discount based on customer type if (CustomerType == \u0026#34;Premium\u0026#34;) { total *= 0.9m; // 10% discount for premium customers } return total; } // Print order receipt public void PrintReceipt() { Console.WriteLine($\u0026#34;Order ID: {Id}\u0026#34;); foreach (var item in Items) { Console.WriteLine($\u0026#34;{item.Name} - {item.Quantity} x {item.Price} = {item.Quantity * item.Price}\u0026#34;); } Console.WriteLine($\u0026#34;Total: {GetTotal()}\u0026#34;); } } Single Responsibility Principle (SRP) Definition The Single Responsibility Principle states that a class should have only one reason to change.\nUse Case Order class violates the SRP because it has two responsibilities, Order calculation and receipt printing. To fix it, we can separate the responsibilities in two different classes.\nSolution public class OrderItem { ... } public class Order // This class only handles order calculation now. { public int Id { get; set; } public List\u0026lt;OrderItem\u0026gt; Items { get; set; } public string CustomerType { get; set; } // \u0026#39;Regular\u0026#39;, \u0026#39;Premium\u0026#39; public Order() { Items = new List\u0026lt;OrderItem\u0026gt;(); } // Calculate order total public decimal GetTotal() { decimal total = 0; foreach (var item in Items) { total += item.Price * item.Quantity; } // Apply discount based on customer type if (CustomerType == \u0026#34;Premium\u0026#34;) { total *= 0.9m; // 10% discount for premium customers } return total; } } public class ReceiptPrinter // This class only handles receipt printing now. { // Print order receipt public void PrintReceipt() { Console.WriteLine($\u0026#34;Order ID: {Id}\u0026#34;); foreach (var item in Items) { Console.WriteLine($\u0026#34;{item.Name} - {item.Quantity} x {item.Price} = {item.Quantity * item.Price}\u0026#34;); } Console.WriteLine($\u0026#34;Total: {GetTotal()}\u0026#34;); } } Open-Closed Principle (OCP) Definition The Open-Closed Principle suggests that software entities should be open for extension but closed for modification.\nUse Case The GetTotal method in our Order class has hardcoded discount logic for premium customers, which violates OCP. To fix it, we can move the discount logic outside the Order class, and pass it as parameter. This way, the discount functionality will be extendable without chaging the Order class code.\nSolution public class OrderItem { ... } public interface IDiscount // We declare IDiscount interface, and include a ApplyDiscount method, so we can have multiple classes implementing it for various kinds of discounts. { decimal ApplyDiscount(decimal total); } public class NoDiscount : IDiscount // This first class will handle no discount scenario. { public decimal ApplyDiscount(decimal total) { return total; } } public class PremiumDiscount : IDiscount // This second class will handle the discount for premium customers. { public decimal ApplyDiscount(decimal total) { return total * 0.9m; // 10% discount for premium customers } } public class Order // This class only handles order calculation now. { public int Id { get; set; } public List\u0026lt;OrderItem\u0026gt; Items { get; set; } public IDiscount Discount { get; set; } // Customer Type logic was removed, and instead IDiscount was added, so the discount can be handled from outside. public Order(IDiscount discount) // IDiscount interface is included in the constructor, so any kind of discount can passed from outside and we don\u0026#39;t need to worry about how it\u0026#39;s applied. { Items = new List\u0026lt;OrderItem\u0026gt;(); Discount = discount; } // Calculate order total public decimal GetTotal() { decimal total = 0; foreach (var item in Items) { total += item.Price * item.Quantity; } return Discount.ApplyDiscount(total); // Condition to apply discount for premium customer was removed and instead the ApplyDiscount method is called from the Discount instance. } } public class ReceiptPrinter { ... } Liskov Substitution Principle (LSP) Definition The Liskov Substitution Principle states that subclasses should be substitutable for their base classes without altering the correctness of the program.\nUse Case By introducing the IDiscount interface, we\u0026rsquo;ve already ensured that any class implementing IDiscount (like PremiumDiscount, NoDiscount, or BirthdayDiscount) can replace each other without breaking the functionality.\nSolution public class OrderItem { ... } public interface IDiscount { decimal ApplyDiscount(decimal total); } public class NoDiscount : IDiscount { ... } public class PremiumDiscount : IDiscount { ... } public class BirthdayDiscount : IDiscount { public decimal ApplyDiscount(decimal total) { return total * 0.95m; // 5% birthday discount } } public class ReceiptPrinter { ... } var birthdayOrder = new Order(new BirthdayDiscount()); // Any discount class can now be used in place of another, following LSP Console.WriteLine(birthdayOrder.GetTotal()); Interface Segregation Principle (ISP) Definition The Interface Segregation Principle suggests that clients should not be forced to depend on interfaces they don\u0026rsquo;t use.\nUse Case Instead of creating one large interface (e.g., IOrderManager), it\u0026rsquo;s better to break it into smaller, more focused interfaces. Let\u0026rsquo;s apply ISP by splitting responsibilities into smaller interfaces for orders and receipt printing.\nSolution public class OrderItem { ... } public interface IDiscount { ... } public class NoDiscount : IDiscount { ... } public class PremiumDiscount : IDiscount { ... } public class BirthdayDiscount : IDiscount { ... } public interface IOrder // Adding this new interface, with \u0026#34;GetTotal\u0026#34; as the only required method to be implemented . { decimal GetTotal(); } public interface IReceiptPrinter // Adding this new interface, with \u0026#34;PrintReceipt\u0026#34; as the only required method to be implemented . { void PrintReceipt(Order order); } public class Order : IOrder { ... } // Order class is only implementing required methods from IOrder interface. public class ReceiptPrinter : IReceiptPrinter { ... } // ReceiptPrinter class is only implementing required methods from IReceiptPrinter interface. Dependency Inversion Principle (DIP) Definition The Dependency Inversion Principle states that high-level modules should depend on abstractions, not on concrete implementations.\nUse Case Instead of creating one large interface (e.g., IOrderManager), it\u0026rsquo;s better to break it into smaller, more focused interfaces. Let\u0026rsquo;s apply ISP by splitting responsibilities into smaller interfaces for orders and receipt printing.\nSolution public class OrderItem { ... } public interface IDiscount { ... } public class NoDiscount : IDiscount { ... } public class PremiumDiscount : IDiscount { ... } public class BirthdayDiscount : IDiscount { ... } public interface IOrder { ... } public interface IReceiptPrinter { ... } public class Order : IOrder // Order class depends on IOrder interface, this way it ensures this class is flexible and it can easily use different implementations without tightly coupled to any one class. { public int Id { get; set; } public List\u0026lt;OrderItem\u0026gt; Items { get; set; } private readonly IDiscount _discount; // We can change the access modifier to private and set it to readonly, so this parameter is only passed in the constructor. public Order(IDiscount discount) // The discount will depend on an abstraction for discounts, IDiscount, instead of concrete implementations like PremiumDiscount or NoDiscount. { Items = new List\u0026lt;OrderItem\u0026gt;(); _discount = discount; } public decimal GetTotal() { decimal total = 0; foreach (var item in Items) { total += item.Price * item.Quantity; } return _discount.ApplyDiscount(total); } } public class ReceiptPrinter : IReceiptPrinter { ... } // ReceiptPrinter class depends on IReceiptPrinter interface, this way it ensures this class is flexible and it can easily use different implementations without tightly coupled to any one class. Conclusion By applying the SOLID principles to a simple Customer Order System example, we refactored the code to become more maintainable, scalable, and flexible. Each principle brings a unique benefit:\nSingle Responsibility Principle: Makes each class focused on a single task, improving clarity and maintainability. Open-Closed Principle: Allows extending functionality without modifying existing code, reducing the risk of introducing bugs. Liskov Substitution Principle: Ensures that subclasses can be used in place of their base classes, preserving correctness. Interface Segregation Principle: Promotes the use of smaller, more focused interfaces, reducing unnecessary dependencies. Dependency Inversion Principle: Encourages classes to depend on abstractions rather than concrete implementations, improving flexibility. Resources C# Clean Code: SOLID Principles – Dev.to ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/02-object-oriented-programming/02-solid/","summary":"\u003c!-- SOLID definition --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eSOLID\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"definition\"\u003eDefinition\u003c/h3\u003e\n\u003cp\u003eSOLID is a set of five design principles that aim to make object-oriented software easier to understand, maintain, and extend. These principles were popularized by Robert C. Martin (Uncle Bob) in his 2000 paper \u0026ldquo;Design Principles and Design Patterns\u0026rdquo; and the acronym SOLID was coined a few years later.\u003c/p\u003e\n\u003cp\u003eThe five SOLID principles are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eS\u003c/strong\u003eingle Responsibility Principle (SRP)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eO\u003c/strong\u003epen-Closed Principle (OCP)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eL\u003c/strong\u003eiskov Substitution Principle (LSP)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eI\u003c/strong\u003enterface Segregation Principle (ISP)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eD\u003c/strong\u003eependency Inversion Principle (DIP)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI\u0026rsquo;ll be using the same example from \u003ca href=\"https://dev.to/moh_moh701/c-clean-code-solid-principles-51ed\" target=\"_blank\" rel=\"noopener\"\u003eC# Clean Code: SOLID Principles – Dev.to\u003c/a\u003e, so as the initial code we have the following:\u003c/p\u003e","tags":null,"title":"SOLID Principles"},{"categories":null,"contents":"\rSOLID Definition SOLID is a set of five design principles that aim to make object-oriented software easier to understand, maintain, and extend. These principles were popularized by Robert C. Martin (Uncle Bob) in his 2000 paper \u0026ldquo;Design Principles and Design Patterns\u0026rdquo; and the acronym SOLID was coined a few years later.\nThe five SOLID principles are:\nSingle Responsibility Principle (SRP) Open-Closed Principle (OCP) Liskov Substitution Principle (LSP) Interface Segregation Principle (ISP) Dependency Inversion Principle (DIP) I\u0026rsquo;ll be using the same example from C# Clean Code: SOLID Principles – Dev.to, so as the initial code we have the following:\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/02-object-oriented-programming/03-design-patterns/","summary":"\u003c!-- SOLID definition --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eSOLID\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003ch3 id=\"definition\"\u003eDefinition\u003c/h3\u003e\n\u003cp\u003eSOLID is a set of five design principles that aim to make object-oriented software easier to understand, maintain, and extend. These principles were popularized by Robert C. Martin (Uncle Bob) in his 2000 paper \u0026ldquo;Design Principles and Design Patterns\u0026rdquo; and the acronym SOLID was coined a few years later.\u003c/p\u003e\n\u003cp\u003eThe five SOLID principles are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eS\u003c/strong\u003eingle Responsibility Principle (SRP)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eO\u003c/strong\u003epen-Closed Principle (OCP)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eL\u003c/strong\u003eiskov Substitution Principle (LSP)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eI\u003c/strong\u003enterface Segregation Principle (ISP)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eD\u003c/strong\u003eependency Inversion Principle (DIP)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI\u0026rsquo;ll be using the same example from \u003ca href=\"https://dev.to/moh_moh701/c-clean-code-solid-principles-51ed\" target=\"_blank\" rel=\"noopener\"\u003eC# Clean Code: SOLID Principles – Dev.to\u003c/a\u003e, so as the initial code we have the following:\u003c/p\u003e","tags":null,"title":"Design Patterns"},{"categories":null,"contents":" Content Use Intention-Revealing Names Avoid Disinformation Make Meaningful Distinctions Use Pronounceable Names Use Searchable Names Avoid Encodings Avoid Mental Mapping Class Names Method Names Don\u0026rsquo;t Be Cute Pick One Word per Concept Don\u0026rsquo;t Pun Use Solution Domain Names Use Problem Domain Names Don\u0026rsquo;t Add Gratuitous Context Resources Overview The third paradigm, which has only recently begun to be adopted, was the first to be invented. Indeed, its invention predates computer programming itself. Functional programming is the direct result of the work of Alonzo Church, who in 1936 invented l-calculus while pursuing the same mathematical problem that was motivating Alan Turing at the same time. His l-calculus is the foundation of the LISP language, invented in 1958 by John McCarthy. A foundational notion of l-calculus is immutability—that is, the notion that the values of symbols do not change. This effectively means that a functional language has no assignment statement. Most functional languages do, in fact, have some means to alter the value of a variable, but only under very strict discipline.\nWe can summarize the functional programming paradigm as follows:\nFunctional programming imposes discipline upon assignment.\nResources Clean Architecture: A Craftsman\u0026rsquo;s Guide to Software Structure and Design, by Robert C. Martin ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/01-software-design-and-architecture/02-programming-paradigms/03-functional-programming/","summary":"\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eContent\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003col\u003e\n\u003cli\u003eUse Intention-Revealing Names\u003c/li\u003e\n\u003cli\u003eAvoid Disinformation\u003c/li\u003e\n\u003cli\u003eMake Meaningful Distinctions\u003c/li\u003e\n\u003cli\u003eUse Pronounceable Names\u003c/li\u003e\n\u003cli\u003eUse Searchable Names\u003c/li\u003e\n\u003cli\u003eAvoid Encodings\u003c/li\u003e\n\u003cli\u003eAvoid Mental Mapping\u003c/li\u003e\n\u003cli\u003eClass Names\u003c/li\u003e\n\u003cli\u003eMethod Names\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Be Cute\u003c/li\u003e\n\u003cli\u003ePick One Word per Concept\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Pun\u003c/li\u003e\n\u003cli\u003eUse Solution Domain Names\u003c/li\u003e\n\u003cli\u003eUse Problem Domain Names\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t Add Gratuitous Context\u003c/li\u003e\n\u003cli\u003eResources\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eOverview\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cp\u003eThe third paradigm, which has only recently begun to be adopted, was the first to be invented. Indeed, its invention predates computer programming itself. Functional programming is the direct result of the work of \u003cstrong\u003eAlonzo Church\u003c/strong\u003e, who in 1936 invented l-calculus while pursuing the same mathematical problem that was motivating Alan Turing at the same time. His l-calculus is the foundation of the LISP language, invented in 1958 by John McCarthy. A foundational notion of l-calculus is immutability—that is, the notion that the values of symbols do not change. This effectively means that a functional language has no assignment statement. Most functional languages do, in fact, have some means to alter the value of a variable, but only under very strict discipline.\u003c/p\u003e","tags":null,"title":"Functional Programming"},{"categories":null,"contents":"\rError Handling try { // try code block - code that may generate an exception } catch (Exception ex) { // catch code block - code to handle an exception } finally { // finally code block - code to clean up resources } Throwing Exceptions throw new FormatException(\u0026#34;FormatException: Calculations in process XYZ have been cancelled due to invalid data format.\u0026#34;); ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/notes/02-csharp/02-object-oriented-programming/99-error-handling/","summary":"\u003c!-- Error Handling --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eError Handling\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// try code block - code that may generate an exception\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (Exception ex)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// catch code block - code to handle an exception\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efinally\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// finally code block - code to clean up resources\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e\n\n\u003c!-- Throwing Exceptions --\u003e\r\n\u003cdiv class=\"note-card \"\u003e\n    \u003cdiv class=\"item\"\u003e\n        \u003ch5 class=\"note-title\"\u003e\u003cspan\u003eThrowing Exceptions\u003c/span\u003e\u003c/h5\u003e\n        \n            \u003cdiv class=\"card\"\u003e\n                \u003cdiv class=\"card-body\"\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e FormatException(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;FormatException: Calculations in process XYZ have been cancelled due to invalid data format.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\n            \u003c/div\u003e\n        \n    \u003c/div\u003e\n\u003c/div\u003e","tags":null,"title":"Error Handling"},{"categories":["Basic"],"contents":"Greeting! This is an introduction post. This post tests the followings:\nHero image is in the same directory as the post. This post should be at top of the sidebar. Post author should be the same as specified in author.yaml file. ","date":"June 8, 2020","hero":"/posts/introduction/hero.svg","permalink":"https://hugo-toha.github.io/posts/introduction/","summary":"\u003cp\u003eGreeting! This is an introduction post. This post tests the followings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHero image is in the same directory as the post.\u003c/li\u003e\n\u003cli\u003eThis post should be at top of the sidebar.\u003c/li\u003e\n\u003cli\u003ePost author should be the same as specified in \u003ccode\u003eauthor.yaml\u003c/code\u003e file.\u003c/li\u003e\n\u003c/ul\u003e","tags":["Basic","Multi-lingual"],"title":"Introduction"},{"categories":null,"contents":"This is a sample post intended to test the followings:\nA different post author. Table of contents. Markdown content rendering. Math rendering. Emoji rendering. Markdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Inline Markdown In Table italics bold strikethrough code Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nMath Rendering Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEmoji Rendering 🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"June 8, 2020","hero":"/posts/markdown-sample/hero.svg","permalink":"https://hugo-toha.github.io/posts/markdown-sample/","summary":"\u003cp\u003eThis is a sample post intended to test the followings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA different post author.\u003c/li\u003e\n\u003cli\u003eTable of contents.\u003c/li\u003e\n\u003cli\u003eMarkdown content rendering.\u003c/li\u003e\n\u003cli\u003eMath rendering.\u003c/li\u003e\n\u003cli\u003eEmoji rendering.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"markdown-syntax-rendering\"\u003eMarkdown Syntax Rendering\u003c/h1\u003e\n\u003ch2 id=\"headings\"\u003eHeadings\u003c/h2\u003e\n\u003cp\u003eThe following HTML \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e—\u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e elements represent six levels of section headings. \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e is the highest section level while \u003ccode\u003e\u0026lt;h6\u0026gt;\u003c/code\u003e is the lowest.\u003c/p\u003e\n\u003ch1 id=\"h1\"\u003eH1\u003c/h1\u003e\n\u003ch2 id=\"h2\"\u003eH2\u003c/h2\u003e\n\u003ch3 id=\"h3\"\u003eH3\u003c/h3\u003e\n\u003ch4 id=\"h4\"\u003eH4\u003c/h4\u003e\n\u003ch5 id=\"h5\"\u003eH5\u003c/h5\u003e\n\u003ch6 id=\"h6\"\u003eH6\u003c/h6\u003e\n\u003ch2 id=\"paragraph\"\u003eParagraph\u003c/h2\u003e\n\u003cp\u003eXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\u003c/p\u003e","tags":null,"title":"Markdown Samples"},{"categories":["Basic"],"contents":"This sample post tests the followings:\nCategory, sub-category nesting in the sidebar. Hero image and other images are in images folder inside this post directory. Different media rendering like image, tweet, YouTube video, Vimeo video etc. Image Sample Tweet Sample Owl bet you\u0026#39;ll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC\n\u0026mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 YouTube Video Sample Vimeo Video Sample ","date":"June 8, 2020","hero":"/posts/category/sub-category/rich-content/images/forest.jpg","permalink":"https://hugo-toha.github.io/posts/category/sub-category/rich-content/","summary":"\u003cp\u003eThis sample post tests the followings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCategory, sub-category nesting in the sidebar.\u003c/li\u003e\n\u003cli\u003eHero image and other images are in \u003ccode\u003eimages\u003c/code\u003e folder inside this post directory.\u003c/li\u003e\n\u003cli\u003eDifferent media rendering like image, tweet, YouTube video, Vimeo video etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"image-sample\"\u003eImage Sample\u003c/h3\u003e\n\u003cimg src=\"/posts/category/sub-category/rich-content/images/forest.jpg\"\n    \n        alt=\"Forest\"\n    \n    \n    \n    \n    \n        class=\"center\"\n    \n\u003e\n\n\u003cdiv style=\"margin-top: rem;\"\u003e\u003c/div\u003e\n\u003ch3 id=\"tweet-sample\"\u003eTweet Sample\u003c/h3\u003e\n\u003cblockquote class=\"twitter-tweet\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eOwl bet you\u0026#39;ll lose this staring contest 🦉 \u003ca href=\"https://t.co/eJh4f2zncC\"\u003epic.twitter.com/eJh4f2zncC\u003c/a\u003e\u003c/p\u003e\u0026mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) \u003ca href=\"https://twitter.com/sandiegozoo/status/1453110110599868418?ref_src=twsrc%5Etfw\"\u003eOctober 26, 2021\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n\n\u003cdiv style=\"margin-top: rem;\"\u003e\u003c/div\u003e\n\u003ch3 id=\"youtube-video-sample\"\u003eYouTube Video Sample\u003c/h3\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/ZJthWmvUzzc?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003cdiv style=\"margin-top: rem;\"\u003e\u003c/div\u003e\n\u003ch3 id=\"vimeo-video-sample\"\u003eVimeo Video Sample\u003c/h3\u003e\n\n      \u003cdiv\n          style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n        \u003ciframe\n          src=\"https://player.vimeo.com/video/48912912?dnt=0\"\n            style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allow=\"fullscreen\"\u003e\n        \u003c/iframe\u003e\n      \u003c/div\u003e","tags":["Markdown","Content Organization","Multi-lingual"],"title":"Rich Content"},{"categories":null,"contents":"This is a sample post intended to test the followings:\nDefault hero image. Different shortcodes. Alert The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;. This is sample alert with type=\u0026quot;danger\u0026quot;. This is sample alert with type=\u0026quot;warning\u0026quot;. This is sample alert with type=\u0026quot;info\u0026quot;. This is sample alert with type=\u0026quot;dark\u0026quot;. This is sample alert with type=\u0026quot;primary\u0026quot;. This is sample alert with type=\u0026quot;secondary\u0026quot;. Image A sample image without any attribute. A sample image with height and width attributes. A center aligned image with height and width attributes. A image with float attribute. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Praesent tellus risus, eleifend vel efficitur ac, venenatis sit amet sem. Ut ut egestas erat. Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Suspendisse nec ipsum eu erat finibus dictum. Morbi volutpat nulla purus, vel maximus ex molestie id. Nullam posuere est urna, at fringilla eros venenatis quis.\nFusce vulputate dolor augue, ut porta sapien fringilla nec. Vivamus commodo erat felis, a sodales lectus finibus nec. In a pulvinar orci. Maecenas suscipit eget lorem non pretium. Nulla aliquam a augue nec blandit. Curabitur ac urna iaculis, ornare ligula nec, placerat nulla. Maecenas aliquam nisi vitae tempus vulputate.\nSplit This theme support splitting the page into as many columns as you wish.\nTwo column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies.\nRight Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat.\nThree column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies.\nMiddle Column Aenean dignissim dictum ex. Donec a nunc vel nibh placerat interdum.\nRight Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat.\nVertical Space Give vertical space between two lines.\nThis is line one. This is line two. It should have 4rem vertical space with previous line.\nVideo Video by Rahul Sharma from Pexels.\nMermaid Here, are few example of mermaid shortcode.\nGraph:\ngraph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Sequence Diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Gantt diagram:\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Class Diagram:\nclassDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label Git Graph:\ngitGraph commit id: \"ZERO\" branch develop commit id:\"A\" checkout main commit id:\"ONE\" checkout develop commit id:\"B\" checkout main commit id:\"TWO\" cherry-pick id:\"A\" commit id:\"THREE\" checkout develop commit id:\"C\" ER Diagram:\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Gist Embeded PDF Page: / Previous Next ","date":"June 8, 2020","hero":"/posts/shortcodes/boat.jpg","permalink":"https://hugo-toha.github.io/posts/shortcodes/","summary":"\u003cp\u003eThis is a sample post intended to test the followings:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDefault hero image.\u003c/li\u003e\n\u003cli\u003eDifferent shortcodes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"alert\"\u003eAlert\u003c/h2\u003e\n\u003cp\u003eThe following alerts are available in this theme.\u003c/p\u003e\n\n\n\n    \n\n\n\u003cdiv class=\"alert success\"\u003e\n    \u003cspan\u003e\u003ci data-feather=\"check-circle\"\u003e\u003c/i\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cstrong\u003eThis is sample alert with \u003ccode\u003etype=\u0026quot;success\u0026quot;\u003c/code\u003e.\u003c/strong\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\n\n\n    \n\n\n\u003cdiv class=\"alert danger\"\u003e\n    \u003cspan\u003e\u003ci data-feather=\"alert-octagon\"\u003e\u003c/i\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cstrong\u003eThis is sample alert with \u003ccode\u003etype=\u0026quot;danger\u0026quot;\u003c/code\u003e.\u003c/strong\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\n\n\n    \n\n\n\u003cdiv class=\"alert warning\"\u003e\n    \u003cspan\u003e\u003ci data-feather=\"alert-triangle\"\u003e\u003c/i\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cstrong\u003eThis is sample alert with \u003ccode\u003etype=\u0026quot;warning\u0026quot;\u003c/code\u003e.\u003c/strong\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\n\n\n    \n\n\n\u003cdiv class=\"alert info\"\u003e\n    \u003cspan\u003e\u003ci data-feather=\"info\"\u003e\u003c/i\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cstrong\u003eThis is sample alert with \u003ccode\u003etype=\u0026quot;info\u0026quot;\u003c/code\u003e.\u003c/strong\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"alert dark\"\u003e\n    \u003cspan\u003e\u003ci data-feather=\"alert-circle\"\u003e\u003c/i\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cstrong\u003eThis is sample alert with \u003ccode\u003etype=\u0026quot;dark\u0026quot;\u003c/code\u003e.\u003c/strong\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"alert primary\"\u003e\n    \u003cspan\u003e\u003ci data-feather=\"alert-circle\"\u003e\u003c/i\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cstrong\u003eThis is sample alert with \u003ccode\u003etype=\u0026quot;primary\u0026quot;\u003c/code\u003e.\u003c/strong\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003cdiv class=\"alert secondary\"\u003e\n    \u003cspan\u003e\u003ci data-feather=\"alert-circle\"\u003e\u003c/i\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cstrong\u003eThis is sample alert with \u003ccode\u003etype=\u0026quot;secondary\u0026quot;\u003c/code\u003e.\u003c/strong\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"image\"\u003eImage\u003c/h2\u003e\n\u003ch4 id=\"a-sample-image-without-any-attribute\"\u003eA sample image without any attribute.\u003c/h4\u003e\n\u003cimg src=\"/posts/shortcodes/boat.jpg\"\n    \n        alt=\"A boat at the sea\"\n    \n    \n    \n    \n    \n\u003e\n\n\u003cdiv style=\"margin-top: 3rem;\"\u003e\u003c/div\u003e\n\u003ch4 id=\"a-sample-image-with-height-and-width-attributes\"\u003eA sample image with \u003ccode\u003eheight\u003c/code\u003e and \u003ccode\u003ewidth\u003c/code\u003e attributes.\u003c/h4\u003e\n\u003cimg src=\"/posts/shortcodes/boat.jpg\"\n    \n        alt=\"A boat at the sea\"\n    \n    \n        width=\"600\"\n    \n    \n        height=\"400\"\n    \n    \n    \n\u003e\n\n\u003cdiv style=\"margin-top: 3rem;\"\u003e\u003c/div\u003e\n\u003ch4 id=\"a-center-aligned-image-with-height-and-width-attributes\"\u003eA center aligned image with \u003ccode\u003eheight\u003c/code\u003e and \u003ccode\u003ewidth\u003c/code\u003e attributes.\u003c/h4\u003e\n\u003cimg src=\"/posts/shortcodes/boat.jpg\"\n    \n        alt=\"A boat at the sea\"\n    \n    \n        width=\"600\"\n    \n    \n        height=\"400\"\n    \n    \n    \n        class=\"center\"\n    \n\u003e\n\n\u003cdiv style=\"margin-top: 3rem;\"\u003e\u003c/div\u003e\n\u003ch4 id=\"a-image-with-float-attribute\"\u003eA image with \u003ccode\u003efloat\u003c/code\u003e attribute.\u003c/h4\u003e\n\u003cimg src=\"/posts/shortcodes/boat.jpg\"\n    \n        alt=\"A boat at the sea\"\n    \n    \n        width=\"500\"\n    \n    \n        height=\"200\"\n    \n    \n        style=\"float: right;\"\n    \n    \n\u003e\n\n\u003cp\u003eLorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Praesent tellus risus, eleifend vel efficitur ac, venenatis sit amet sem. Ut ut egestas erat. Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Suspendisse nec ipsum eu erat finibus dictum. Morbi volutpat nulla purus, vel maximus ex molestie id. Nullam posuere est urna, at fringilla eros venenatis quis.\u003c/p\u003e","tags":null,"title":"Shortcodes Samples"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/posts/category/sub-category/_index.bn/","summary":"","tags":null,"title":"Sub-Category"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/posts/category/_index.bn/","summary":"","tags":null,"title":"Top Category Sample"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/posts/_index.bn/","summary":"","tags":null,"title":"পোস্ট সমূহ"}]